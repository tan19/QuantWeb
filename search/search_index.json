{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A stroll through the brambles of Quant Finance","title":"Home"},{"location":"-Quant%20Interview%20Questions/","text":"Index","title":"Index"},{"location":"-Quant%20Interview%20Questions/#index","text":"","title":"Index"},{"location":"-Quant%20Interview%20Questions/0.%20Basics/Basics/","text":"Basics","title":"Basics"},{"location":"-Quant%20Interview%20Questions/0.%20Basics/Basics/#basics","text":"","title":"Basics"},{"location":"-Quant%20Interview%20Questions/0.%20Basics/1.1%20Mental%20Games/","text":"Examples OI Wiki \u6d1b\u8c37 \u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u8fdb\u9636\u8bad\u7ec3\u6307\u5357","title":"Examples"},{"location":"-Quant%20Interview%20Questions/0.%20Basics/1.1%20Mental%20Games/#examples","text":"OI Wiki \u6d1b\u8c37 \u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u8fdb\u9636\u8bad\u7ec3\u6307\u5357","title":"Examples"},{"location":"-Quant%20Interview%20Questions/0.%20Basics/1.1%20Mental%20Games/Logic%20Brainteasers/","text":"Logic Brainteasers","title":"Logic Brainteasers"},{"location":"-Quant%20Interview%20Questions/0.%20Basics/1.1%20Mental%20Games/Logic%20Brainteasers/#logic-brainteasers","text":"","title":"Logic Brainteasers"},{"location":"-Quant%20Interview%20Questions/0.%20Basics/1.1%20Mental%20Games/Math%20Brainteasers/","text":"Math Brainteasers","title":"Math Brainteasers"},{"location":"-Quant%20Interview%20Questions/0.%20Basics/1.1%20Mental%20Games/Math%20Brainteasers/#math-brainteasers","text":"","title":"Math Brainteasers"},{"location":"-Quant%20Interview%20Questions/0.%20Basics/1.1%20Mental%20Games/Mental%20Math/","text":"Mental Math","title":"Mental Math"},{"location":"-Quant%20Interview%20Questions/0.%20Basics/1.1%20Mental%20Games/Mental%20Math/#mental-math","text":"","title":"Mental Math"},{"location":"-Quant%20Interview%20Questions/1.%20Quant%20Developer/Index/","text":"Quant Developer","title":"Quant Developer"},{"location":"-Quant%20Interview%20Questions/1.%20Quant%20Developer/Index/#quant-developer","text":"","title":"Quant Developer"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.1%20Calculus/","text":"Calculus (6) Pre-calculus (1) Q: What is \\(\\sin(18^{\\circ})\\) ? (Medium) What is \\(\\sin(18^{\\circ})\\) ? A: What is \\(\\sin(18^{\\circ})\\) ? The answer is \\((\\sqrt{5} - 1)/4\\) . The geometry method is illustrated below (let CD = \\(x\\) ): \\[\\begin{align*} \\frac{2+x}{2} = \\frac{2}{x} \\implies x = \\sqrt{5} - 1 \\implies sin(18^{\\circ}) = \\frac{1}{2+x} = \\frac{\\sqrt{5}-1}{4} \\end{align*}\\] The algebraic method is: \\[\\begin{align*} \\theta = 18^{\\circ} &\\iff 5\\theta = 90^{\\circ}\\\\ \\sin(2\\theta) &= \\cos(3\\theta)\\\\ 2\\sin(\\theta)\\cos(\\theta) &= \\cos(2\\theta)\\cos(\\theta) - \\sin(2\\theta)\\sin(\\theta) \\\\ & = \\cos(2\\theta)\\cos(\\theta) - 2\\sin(\\theta)\\cos(\\theta)\\sin(\\theta)\\\\ 2\\sin(\\theta) &= \\cos(2\\theta) - 2\\sin(\\theta)\\sin(\\theta)\\\\ 2\\sin(\\theta) &= 1 - 2\\sin^2(\\theta) - 2\\sin(\\theta)\\sin(\\theta)\\\\ \\end{align*}\\] and finally, \\[\\begin{align*} 4\\sin^2(\\theta) + 2\\sin(\\theta) - 1 &= 0\\\\ \\sin(\\theta) = \\frac{\\sqrt{5} - 1}{4} \\end{align*}\\] Limits (3) Q: Square Root of 2 (Easy) Calculate \\(\\sqrt{2 + \\sqrt{2 + \\sqrt{2 + \\dots}}}\\) . A: Square Root of 2 (Easy) Trick If you are asked for something in a repetitive process such as computing an \"until event\" in coin tossing or a recursive pattern as in this problem, make it a variable and solve it . Let \\[ x \\equiv \\sqrt{2 + \\sqrt{2 + \\sqrt{2 + \\dots}}} \\] Then $$ x = \\sqrt{2 + x} $$ So \\(x = 2\\) . Note that the other root \\(x = -1\\) doesn't work. Q: Solve \\(x^{x^{x^{...}}} = 2\\) (Easy) Solve $Solve \\(x^{x^{x^{...}}} = 2\\) . A: Solve \\(x^{x^{x^{...}}} = 2\\) (Easy) Trick If you are asked for something in a repetitive process such as computing an \"until event\" in coin tossing or a recursive pattern as in this problem, make it a variable and solve it . \\(x^{x^{x^{...}}} = 2\\) is equivalent to \\(x^2 = 2\\) , so \\(x = \\sqrt{2}\\) . Q: Limit (Easy) Calculate \\[ \\lim_{x \\to 0}\\left[\\frac{a^x + b^x}{2}\\right]^{\\frac1x} \\] A: Limit (Easy) Trick Note that if \\(g(x)\\) is continuous and \\(\\lim_{x \\to x_0}f(x)\\) exists, then we have \\[ \\lim_{x \\to x_0} g(f(x)) = g(\\lim_{x \\to x_0} f(x)) \\] Since \\(g(x) \\equiv e^x\\) is continuous, so we have \\[\\begin{align*} &\\lim_{x \\to 0}\\frac1x \\ln \\left[\\frac{a^x + b^x}{2}\\right]\\\\ &= \\lim_{x \\to 0} \\frac{2}{a^x + b^x}\\frac{a^x\\ln a + b^x \\ln b}{2} = \\frac{\\ln ab}{2} \\end{align*}\\] Finally, \\(\\lim_{x \\to 0}\\left[\\frac{a^x + b^x}{2}\\right]^{\\frac1x} = \\sqrt{ab}\\) . Derivatives Integration Complex Numbers (2) Q: Is \\(\\sin(1^\\circ)\\) algebraic? Is \\(\\sin(1^\\circ)\\) algebraic? A: Is \\(\\sin(1^\\circ)\\) algebraic? Yes. Q: Square Root of \\(i\\) (Easy) What is \\(\\sqrt{i}\\) ? A: Square Root of \\(i\\) (Easy) Trick When you see \\(i\\) , usually start to re-write it in Euler's formula: \\[ e^{ix} = \\cos(x) + i\\sin(x) \\] By Euler's formula, we have \\[\\begin{align*} &i^{\\frac12} \\equiv e^{i (2k\\pi + \\frac{\\pi}{2}) \\frac12} \\\\ &= \\cos\\left(k\\pi + \\frac{\\pi}{4}\\right) + i \\sin\\left(k\\pi + \\frac{\\pi}{4}\\right)\\\\ &= \\pm\\left(\\frac{\\sqrt{2}}{2} + i \\frac{\\sqrt{2}}{2}\\right) \\end{align*}\\] Another method is to observe that: \\[ \\sqrt{i} \\equiv a + bi \\implies i = a^2 + 2abi - b^2 \\] and so \\[\\begin{align*} a^2 - b^2 &= 0\\\\ 2ab &= 1 \\end{align*}\\] which gives us the same results.","title":"Calculus (6)"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.1%20Calculus/#calculus-6","text":"","title":"Calculus (6)"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.1%20Calculus/#pre-calculus-1","text":"Q: What is \\(\\sin(18^{\\circ})\\) ? (Medium) What is \\(\\sin(18^{\\circ})\\) ? A: What is \\(\\sin(18^{\\circ})\\) ? The answer is \\((\\sqrt{5} - 1)/4\\) . The geometry method is illustrated below (let CD = \\(x\\) ): \\[\\begin{align*} \\frac{2+x}{2} = \\frac{2}{x} \\implies x = \\sqrt{5} - 1 \\implies sin(18^{\\circ}) = \\frac{1}{2+x} = \\frac{\\sqrt{5}-1}{4} \\end{align*}\\] The algebraic method is: \\[\\begin{align*} \\theta = 18^{\\circ} &\\iff 5\\theta = 90^{\\circ}\\\\ \\sin(2\\theta) &= \\cos(3\\theta)\\\\ 2\\sin(\\theta)\\cos(\\theta) &= \\cos(2\\theta)\\cos(\\theta) - \\sin(2\\theta)\\sin(\\theta) \\\\ & = \\cos(2\\theta)\\cos(\\theta) - 2\\sin(\\theta)\\cos(\\theta)\\sin(\\theta)\\\\ 2\\sin(\\theta) &= \\cos(2\\theta) - 2\\sin(\\theta)\\sin(\\theta)\\\\ 2\\sin(\\theta) &= 1 - 2\\sin^2(\\theta) - 2\\sin(\\theta)\\sin(\\theta)\\\\ \\end{align*}\\] and finally, \\[\\begin{align*} 4\\sin^2(\\theta) + 2\\sin(\\theta) - 1 &= 0\\\\ \\sin(\\theta) = \\frac{\\sqrt{5} - 1}{4} \\end{align*}\\]","title":"Pre-calculus (1)"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.1%20Calculus/#limits-3","text":"Q: Square Root of 2 (Easy) Calculate \\(\\sqrt{2 + \\sqrt{2 + \\sqrt{2 + \\dots}}}\\) . A: Square Root of 2 (Easy) Trick If you are asked for something in a repetitive process such as computing an \"until event\" in coin tossing or a recursive pattern as in this problem, make it a variable and solve it . Let \\[ x \\equiv \\sqrt{2 + \\sqrt{2 + \\sqrt{2 + \\dots}}} \\] Then $$ x = \\sqrt{2 + x} $$ So \\(x = 2\\) . Note that the other root \\(x = -1\\) doesn't work. Q: Solve \\(x^{x^{x^{...}}} = 2\\) (Easy) Solve $Solve \\(x^{x^{x^{...}}} = 2\\) . A: Solve \\(x^{x^{x^{...}}} = 2\\) (Easy) Trick If you are asked for something in a repetitive process such as computing an \"until event\" in coin tossing or a recursive pattern as in this problem, make it a variable and solve it . \\(x^{x^{x^{...}}} = 2\\) is equivalent to \\(x^2 = 2\\) , so \\(x = \\sqrt{2}\\) . Q: Limit (Easy) Calculate \\[ \\lim_{x \\to 0}\\left[\\frac{a^x + b^x}{2}\\right]^{\\frac1x} \\] A: Limit (Easy) Trick Note that if \\(g(x)\\) is continuous and \\(\\lim_{x \\to x_0}f(x)\\) exists, then we have \\[ \\lim_{x \\to x_0} g(f(x)) = g(\\lim_{x \\to x_0} f(x)) \\] Since \\(g(x) \\equiv e^x\\) is continuous, so we have \\[\\begin{align*} &\\lim_{x \\to 0}\\frac1x \\ln \\left[\\frac{a^x + b^x}{2}\\right]\\\\ &= \\lim_{x \\to 0} \\frac{2}{a^x + b^x}\\frac{a^x\\ln a + b^x \\ln b}{2} = \\frac{\\ln ab}{2} \\end{align*}\\] Finally, \\(\\lim_{x \\to 0}\\left[\\frac{a^x + b^x}{2}\\right]^{\\frac1x} = \\sqrt{ab}\\) .","title":"Limits (3)"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.1%20Calculus/#derivatives","text":"","title":"Derivatives"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.1%20Calculus/#integration","text":"","title":"Integration"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.1%20Calculus/#complex-numbers-2","text":"Q: Is \\(\\sin(1^\\circ)\\) algebraic? Is \\(\\sin(1^\\circ)\\) algebraic? A: Is \\(\\sin(1^\\circ)\\) algebraic? Yes. Q: Square Root of \\(i\\) (Easy) What is \\(\\sqrt{i}\\) ? A: Square Root of \\(i\\) (Easy) Trick When you see \\(i\\) , usually start to re-write it in Euler's formula: \\[ e^{ix} = \\cos(x) + i\\sin(x) \\] By Euler's formula, we have \\[\\begin{align*} &i^{\\frac12} \\equiv e^{i (2k\\pi + \\frac{\\pi}{2}) \\frac12} \\\\ &= \\cos\\left(k\\pi + \\frac{\\pi}{4}\\right) + i \\sin\\left(k\\pi + \\frac{\\pi}{4}\\right)\\\\ &= \\pm\\left(\\frac{\\sqrt{2}}{2} + i \\frac{\\sqrt{2}}{2}\\right) \\end{align*}\\] Another method is to observe that: \\[ \\sqrt{i} \\equiv a + bi \\implies i = a^2 + 2abi - b^2 \\] and so \\[\\begin{align*} a^2 - b^2 &= 0\\\\ 2ab &= 1 \\end{align*}\\] which gives us the same results.","title":"Complex Numbers (2)"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.1%20Differential%20Equations/","text":"Differential Equations ODE Q: ODE I Solve \\(f' = f\\) and \\(g'' = g\\) . A: ODE I \\[\\begin{align} f(x) &= Ce^x\\\\ g(x) &= Ce^x + De^{-x} \\end{align}\\]","title":"Differential Equations"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.1%20Differential%20Equations/#differential-equations","text":"","title":"Differential Equations"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.1%20Differential%20Equations/#ode","text":"Q: ODE I Solve \\(f' = f\\) and \\(g'' = g\\) . A: ODE I \\[\\begin{align} f(x) &= Ce^x\\\\ g(x) &= Ce^x + De^{-x} \\end{align}\\]","title":"ODE"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.2%20Linear%20Algebra/","text":"Linear Algebra Quant Interview Questions","title":"Linear Algebra"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.2%20Linear%20Algebra/#linear-algebra","text":"Quant Interview Questions","title":"Linear Algebra"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.3%20Probability/","text":"Probability Quant Interview Questions","title":"Probability"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.3%20Probability/#probability","text":"Quant Interview Questions","title":"Probability"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.4%20Statistics%20%26%20Machine%20Learning/","text":"Statistics & Machine Learning Q: Why K-Means has to use Euclidean distance? Why K-Means has to use Euclidean distance? A: Why K-Means has to use Euclidean distance? The way k-means is constructed is not based on distances. StackOverflow Bias-Variance Tradeoff A model can be thought of as a statistic (i.e., a function of samples), hence it has a sampling distribution with its mean and variance. The error between the mean (i.e., average model prediction) and the ground truth is called bias , while the average variability in the model prediction is called variance , which tells you how much the model changes as the data are sampled repeatedly. Mathematically, \\[\\begin{align} \\mbox{Bias} &= \\EEE[\\hat{f}(x)] - f(x)\\\\ \\mbox{Variance} &= \\mbox{Var}[\\hat{f}(x)] \\end{align}\\] The mean square error can then be decomposed into three terms: \\[\\begin{align} \\mbox{Error} &\\equiv \\EEE[(\\hat{f}(x) - f(x))^2] \\\\ \\nonumber &= (\\EEE[\\hat{f}(x)-f(x)])^2 + \\mbox{Var}[\\hat{f}(x) - f(x)]\\\\ \\nonumber &= (\\EEE[\\hat{f}(x)-f(x)])^2 + \\mbox{Var}[\\hat{f}(x)] + \\mbox{Var}[f(x)] \\\\ \\nonumber &= \\mbox{Bias}^2 + \\mbox{Variance} + \\mbox{Ground Truth Error} \\end{align}\\] The immediate consequences of the above are that: Increased data size does not help the bias term. But it does help the variance term. The ground truth error, which comes from the population, is irreducible. One way to resolve this issue is to use mixture models and/or ensemble methods (read Section \\ref{sec:Ensemble_Methods} for more details). See Questions (e.g., \\ref{q:Bias-Variance Tradeoff}) for the topic of this section.","title":"Statistics & Machine Learning"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.4%20Statistics%20%26%20Machine%20Learning/#statistics-machine-learning","text":"Q: Why K-Means has to use Euclidean distance? Why K-Means has to use Euclidean distance? A: Why K-Means has to use Euclidean distance? The way k-means is constructed is not based on distances. StackOverflow","title":"Statistics &amp; Machine Learning"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.4%20Statistics%20%26%20Machine%20Learning/#bias-variance-tradeoff","text":"A model can be thought of as a statistic (i.e., a function of samples), hence it has a sampling distribution with its mean and variance. The error between the mean (i.e., average model prediction) and the ground truth is called bias , while the average variability in the model prediction is called variance , which tells you how much the model changes as the data are sampled repeatedly. Mathematically, \\[\\begin{align} \\mbox{Bias} &= \\EEE[\\hat{f}(x)] - f(x)\\\\ \\mbox{Variance} &= \\mbox{Var}[\\hat{f}(x)] \\end{align}\\] The mean square error can then be decomposed into three terms: \\[\\begin{align} \\mbox{Error} &\\equiv \\EEE[(\\hat{f}(x) - f(x))^2] \\\\ \\nonumber &= (\\EEE[\\hat{f}(x)-f(x)])^2 + \\mbox{Var}[\\hat{f}(x) - f(x)]\\\\ \\nonumber &= (\\EEE[\\hat{f}(x)-f(x)])^2 + \\mbox{Var}[\\hat{f}(x)] + \\mbox{Var}[f(x)] \\\\ \\nonumber &= \\mbox{Bias}^2 + \\mbox{Variance} + \\mbox{Ground Truth Error} \\end{align}\\] The immediate consequences of the above are that: Increased data size does not help the bias term. But it does help the variance term. The ground truth error, which comes from the population, is irreducible. One way to resolve this issue is to use mixture models and/or ensemble methods (read Section \\ref{sec:Ensemble_Methods} for more details). See Questions (e.g., \\ref{q:Bias-Variance Tradeoff}) for the topic of this section.","title":"Bias-Variance Tradeoff"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.5%20Numerical%20Methods%20and%20Optimization/","text":"Numerical Methods & Optimization","title":"Numerical Methods & Optimization"},{"location":"-Quant%20Interview%20Questions/2.%20Quant%20Researcher%20%286%29/2.5%20Numerical%20Methods%20and%20Optimization/#numerical-methods-optimization","text":"","title":"Numerical Methods &amp; Optimization"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/BM/","text":"Brownian Motion and Related Concepts (2) Brownian Motion (1) Q: Brownian Motion Hitting Time Probability Suppose \\(dX_t = rdt + dW_t\\) , what is the probability that \\(X_t\\) hits 3 before hitting -5? A: Brownian Motion Hitting Time Probability Notice that the exponential martingale is defined as: \\[\\begin{align} e^{-\\frac{\\sigma^2}{2}t + \\sigma W_t} \\end{align}\\] Plug in \\(W_t = X_t - rt\\) , we have \\[\\begin{align} e^{-\\frac{\\sigma^2}{2}t + \\sigma (X_t - rt)} \\end{align}\\] Let \\(\\sigma = -2r\\) , we have \\[\\begin{align} e^{-\\frac{\\sigma^2}{2}t + \\sigma (X_t - rt)} = e^{-\\frac{(-2r)^2}{2}t - 2r (X_t - rt)} = e^{-2rX_t} \\end{align}\\] and \\(e^{-2rX_t}\\) is a martingale. Now, \\[\\begin{align} 1 = E[e^{-2rX_t}] = P_3 e^{-2r(3)} + (1-P_3) e^{-2r(-5)} \\implies P_3 = \\frac{e^{10r} - 1}{e^{10r} - e^{-6r}} \\end{align}\\] Brownian Bridge (1) Q: Brownian Bridge What is a Brownian bridge? What is the distribution of a Brownian Bridge? Why and how do we use it? A: Brownian Bridge In a Brownian motion the state variable, i.e. the stock price, FX rate, interest rate, is stochastic and evolves over a period of time in a random manner. The randomness is tied to the volatility of the asset and the drift is deterministic. In the short run, the volatility dominates the process and the asset price path is truly stochastic, i.e. random. However, over the long period of time the drift will dominate the volatility and therefore, if there are small errors in estimation of the drift it will lead to large fluctuations in the future price distribution. This is one of the drawbacks of a Brownian motion (as applied to the pricing of financial assets). Over longer horizons the drift of the stochastic process (Brownian motion) becomes a complicating factor. Therefore, a Brownian motion may not be very suitable for modelling an asset which has a longer maturity period, say, 5 years, 10 years, etc. and where the final state of the asset is known. Like a discount bond (Treasury bonds). A government bond can have maturities of 5 years, 10 years, 30 years and the final value of the bond is known, i.e. the par (face) value. And, a bond will always redeem at par. Besides Treasury and discount bonds, Brownian Bridges are also used to model Barrier options and other exotic options where the terminal value is known in advance. Monte Carlo pricing of continuous barrier options with Heston . Martingale","title":"Brownian Motion and Related Concepts (2)"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/BM/#brownian-motion-and-related-concepts-2","text":"","title":"Brownian Motion and Related Concepts (2)"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/BM/#brownian-motion-1","text":"Q: Brownian Motion Hitting Time Probability Suppose \\(dX_t = rdt + dW_t\\) , what is the probability that \\(X_t\\) hits 3 before hitting -5? A: Brownian Motion Hitting Time Probability Notice that the exponential martingale is defined as: \\[\\begin{align} e^{-\\frac{\\sigma^2}{2}t + \\sigma W_t} \\end{align}\\] Plug in \\(W_t = X_t - rt\\) , we have \\[\\begin{align} e^{-\\frac{\\sigma^2}{2}t + \\sigma (X_t - rt)} \\end{align}\\] Let \\(\\sigma = -2r\\) , we have \\[\\begin{align} e^{-\\frac{\\sigma^2}{2}t + \\sigma (X_t - rt)} = e^{-\\frac{(-2r)^2}{2}t - 2r (X_t - rt)} = e^{-2rX_t} \\end{align}\\] and \\(e^{-2rX_t}\\) is a martingale. Now, \\[\\begin{align} 1 = E[e^{-2rX_t}] = P_3 e^{-2r(3)} + (1-P_3) e^{-2r(-5)} \\implies P_3 = \\frac{e^{10r} - 1}{e^{10r} - e^{-6r}} \\end{align}\\]","title":"Brownian Motion (1)"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/BM/#brownian-bridge-1","text":"Q: Brownian Bridge What is a Brownian bridge? What is the distribution of a Brownian Bridge? Why and how do we use it? A: Brownian Bridge In a Brownian motion the state variable, i.e. the stock price, FX rate, interest rate, is stochastic and evolves over a period of time in a random manner. The randomness is tied to the volatility of the asset and the drift is deterministic. In the short run, the volatility dominates the process and the asset price path is truly stochastic, i.e. random. However, over the long period of time the drift will dominate the volatility and therefore, if there are small errors in estimation of the drift it will lead to large fluctuations in the future price distribution. This is one of the drawbacks of a Brownian motion (as applied to the pricing of financial assets). Over longer horizons the drift of the stochastic process (Brownian motion) becomes a complicating factor. Therefore, a Brownian motion may not be very suitable for modelling an asset which has a longer maturity period, say, 5 years, 10 years, etc. and where the final state of the asset is known. Like a discount bond (Treasury bonds). A government bond can have maturities of 5 years, 10 years, 30 years and the final value of the bond is known, i.e. the par (face) value. And, a bond will always redeem at par. Besides Treasury and discount bonds, Brownian Bridges are also used to model Barrier options and other exotic options where the terminal value is known in advance. Monte Carlo pricing of continuous barrier options with Heston .","title":"Brownian Bridge (1)"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/BM/#martingale","text":"","title":"Martingale"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/BS/","text":"Black Scholes and Vanilla Options","title":"Black Scholes and Vanilla Options"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/BS/#black-scholes-and-vanilla-options","text":"","title":"Black Scholes and Vanilla Options"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/4.2%20Trading%20Strategies/","text":"Index","title":"Index"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/4.2%20Trading%20Strategies/#index","text":"","title":"Index"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/4.3%20Markets%20and%20Execution/","text":"Market IEX is the new exchange for fairer market. Q: What is today's 10-year yield? What is today's 10-year yield? A: What is today's 10-year yield? Q: What is a currency pair cross? What is a currency pair cross? A: What is a currency pair cross? A cross currency refers to a currency pair or transaction that does not involve the U.S. dollar. For example, EUR/GBP. Q: Why you can't have time-in-force stop-loss orders? What you can't have time-in-force stop-loss orders? A: What is a currency pair cross?","title":"Market"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/4.3%20Markets%20and%20Execution/#market","text":"IEX is the new exchange for fairer market. Q: What is today's 10-year yield? What is today's 10-year yield? A: What is today's 10-year yield? Q: What is a currency pair cross? What is a currency pair cross? A: What is a currency pair cross? A cross currency refers to a currency pair or transaction that does not involve the U.S. dollar. For example, EUR/GBP. Q: Why you can't have time-in-force stop-loss orders? What you can't have time-in-force stop-loss orders? A: What is a currency pair cross?","title":"Market"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/5.1%20Portfolio%20Optimization/","text":"Index","title":"Index"},{"location":"-Quant%20Interview%20Questions/3.%20Quant%20Trader%20%282%29/5.1%20Portfolio%20Optimization/#index","text":"","title":"Index"},{"location":"1.%20Quant%20Developer/","text":"A stroll through the brambles of Quant Finance interviews.","title":"Index"},{"location":"1.%20Quant%20Developer/1.%20C%2B%2B/","text":"Index Books The Definitive C++ Book Guide and List C++ Standard 2017 Clean Code CPP Reference cpp4u Tutorials The major difference between Java and C++ lies in multiple inheritance, which Java has replaced with a simpler concept of interfaces. The single biggest difference between Java and C/C++ is that Java has a pointer model that eliminates the possibility of overwriting memory and corrupting data. Tutorials Programming Languages C++ 1 , 2 3 Bash tricks 1 , 2 , 3 C/C++\u9762\u8bd5\u77e5\u8bc6\u603b\u7ed3 \u6280\u672f\u9762\u8bd5\u5fc5\u5907\u57fa\u7840\u77e5\u8bc6 \u8fd9\u53ef\u80fd\u662f\u4e1c\u534a\u7403\u6700\u4fdd\u59c6\u7ea7\u7684\u540e\u53f0\u670d\u52a1\u5668\u5f00\u53d1\u5b66\u4e60\u8def\u7ebf AI education materials Programming Programming Languages Types and programming languages Software Foundations C The C Programming Language Pointers on C C Traps and Pitfalls Expert C Programming C++ C++ Primer, Accelerated C++, The C++ Programming Language C++ Templates Effective C++, More Effective C++, Exceptional C++, More Exceptional C++, Effective STL C++ Coding Standards, Exceptional C++ Style Inside the C++ Object Model The Definitive C++ Book Guide and List C++ Standard 2017 Clean Code CPP Reference cpp4u","title":"Index"},{"location":"1.%20Quant%20Developer/1.%20C%2B%2B/#index","text":"","title":"Index"},{"location":"1.%20Quant%20Developer/1.%20C%2B%2B/#books","text":"The Definitive C++ Book Guide and List C++ Standard 2017 Clean Code CPP Reference cpp4u","title":"Books"},{"location":"1.%20Quant%20Developer/1.%20C%2B%2B/#tutorials","text":"The major difference between Java and C++ lies in multiple inheritance, which Java has replaced with a simpler concept of interfaces. The single biggest difference between Java and C/C++ is that Java has a pointer model that eliminates the possibility of overwriting memory and corrupting data. Tutorials Programming Languages C++ 1 , 2 3 Bash tricks 1 , 2 , 3 C/C++\u9762\u8bd5\u77e5\u8bc6\u603b\u7ed3 \u6280\u672f\u9762\u8bd5\u5fc5\u5907\u57fa\u7840\u77e5\u8bc6 \u8fd9\u53ef\u80fd\u662f\u4e1c\u534a\u7403\u6700\u4fdd\u59c6\u7ea7\u7684\u540e\u53f0\u670d\u52a1\u5668\u5f00\u53d1\u5b66\u4e60\u8def\u7ebf AI education materials","title":"Tutorials"},{"location":"1.%20Quant%20Developer/1.%20C%2B%2B/#programming","text":"","title":"Programming"},{"location":"1.%20Quant%20Developer/1.%20C%2B%2B/#programming-languages","text":"Types and programming languages Software Foundations","title":"Programming Languages"},{"location":"1.%20Quant%20Developer/1.%20C%2B%2B/#c","text":"The C Programming Language Pointers on C C Traps and Pitfalls Expert C Programming","title":"C"},{"location":"1.%20Quant%20Developer/1.%20C%2B%2B/#c_1","text":"C++ Primer, Accelerated C++, The C++ Programming Language C++ Templates Effective C++, More Effective C++, Exceptional C++, More Exceptional C++, Effective STL C++ Coding Standards, Exceptional C++ Style Inside the C++ Object Model The Definitive C++ Book Guide and List C++ Standard 2017 Clean Code CPP Reference cpp4u","title":"C++"},{"location":"1.%20Quant%20Developer/2.%20Java/","text":"Index","title":"Index"},{"location":"1.%20Quant%20Developer/2.%20Java/#index","text":"","title":"Index"},{"location":"1.%20Quant%20Developer/2.%20Java/1.%20Objects%20and%20Classes/1.%20Objects%20and%20Classes/","text":"Objects and Classes","title":"Objects and Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/1.%20Objects%20and%20Classes/1.%20Objects%20and%20Classes/#objects-and-classes","text":"","title":"Objects and Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/2.%20Inheritance/2.%20Inheritance/","text":"Objects and Classes","title":"Objects and Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/2.%20Inheritance/2.%20Inheritance/#objects-and-classes","text":"","title":"Objects and Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/3.%20Interfaces%2C%20Lambda%20Expressions%2C%20and%20Inner%20Classes/3.%20Interfaces%2C%20Lambda%20Expressions%2C%20and%20Inner%20Classes/","text":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes Anonymous Inner Class If you want to make only a single object of this class, you don't even need to give the class a name. Such a class is called an anonymous inner class . Anonymous classes cannot have a constructor (in C++ and Java) but can have a destructor (this is for C++; there's no destructor in Java, instead we have Garbage Collector in Java). Anonymous Inner Class Java 1 2 3 4 5 6 var obj = new SuperType ( construction parameters ) { // even though an anonymous class cannot have constructors, // you can provide an object initialization block { initialization } ... } The SuperType can be an interface, then the inner class implements that interface. It can also be a class, then the inner class extends that class. C++ There is no equivalent such a concept in C++, although the concept of anonymous class exists. To declare an anonymous class and its variables, just ignore the class name, as in: 1 2 3 4 5 6 class { public : void f () { std :: cout << \"I am an object of an anonymous class.\" << std :: endl ; } } obj1 , obj2 ; The closest equivalent to Java anonymous inner classes in C++ is to use a private class which implements the corresponding interface (but if the interface is a functional interface, then the closest equivalent is to replace the functional interface with a function pointer and the anonymous inner class with a lambda). See more here . Python In Python, you can use the type(name, bases, dict) builtin function to crate on the fly. For example: 1 2 3 4 5 class ParentClass : pass op = type ( \"ChildClass\" , ( ParentClass , object ), { \"foo\" : lambda self : print ( \"foo\" )}) op () . foo ()","title":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/3.%20Interfaces%2C%20Lambda%20Expressions%2C%20and%20Inner%20Classes/3.%20Interfaces%2C%20Lambda%20Expressions%2C%20and%20Inner%20Classes/#chapter-6-interfaces-lambda-expressions-and-inner-classes","text":"","title":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/3.%20Interfaces%2C%20Lambda%20Expressions%2C%20and%20Inner%20Classes/3.%20Interfaces%2C%20Lambda%20Expressions%2C%20and%20Inner%20Classes/#anonymous-inner-class","text":"If you want to make only a single object of this class, you don't even need to give the class a name. Such a class is called an anonymous inner class . Anonymous classes cannot have a constructor (in C++ and Java) but can have a destructor (this is for C++; there's no destructor in Java, instead we have Garbage Collector in Java). Anonymous Inner Class Java 1 2 3 4 5 6 var obj = new SuperType ( construction parameters ) { // even though an anonymous class cannot have constructors, // you can provide an object initialization block { initialization } ... } The SuperType can be an interface, then the inner class implements that interface. It can also be a class, then the inner class extends that class. C++ There is no equivalent such a concept in C++, although the concept of anonymous class exists. To declare an anonymous class and its variables, just ignore the class name, as in: 1 2 3 4 5 6 class { public : void f () { std :: cout << \"I am an object of an anonymous class.\" << std :: endl ; } } obj1 , obj2 ; The closest equivalent to Java anonymous inner classes in C++ is to use a private class which implements the corresponding interface (but if the interface is a functional interface, then the closest equivalent is to replace the functional interface with a function pointer and the anonymous inner class with a lambda). See more here . Python In Python, you can use the type(name, bases, dict) builtin function to crate on the fly. For example: 1 2 3 4 5 class ParentClass : pass op = type ( \"ChildClass\" , ( ParentClass , object ), { \"foo\" : lambda self : print ( \"foo\" )}) op () . foo ()","title":"Anonymous Inner Class"},{"location":"1.%20Quant%20Developer/2.%20Java/4.%20Exceptions%2C%20Assertions%2C%20and%20Logging/4.%20Exceptions%2C%20Assertions%2C%20and%20Logging/","text":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes Anonymous Inner Class If you want to make only a single object of this class, you don't even need to give the class a name. Such a class is called an anonymous inner class . Anonymous classes cannot have a constructor (in C++ and Java) but can have a destructor (this is for C++; there's no destructor in Java, instead we have Garbage Collector in Java). Anonymous Inner Class Java 1 2 3 4 5 6 var obj = new SuperType ( construction parameters ) { // even though an anonymous class cannot have constructors, // you can provide an object initialization block { initialization } ... } The SuperType can be an interface, then the inner class implements that interface. It can also be a class, then the inner class extends that class. C++ There is no equivalent such a concept in C++, although the concept of anonymous class exists. To declare an anonymous class and its variables, just ignore the class name, as in: 1 2 3 4 5 6 class { public : void f () { std :: cout << \"I am an object of an anonymous class.\" << std :: endl ; } } obj1 , obj2 ; The closest equivalent to Java anonymous inner classes in C++ is to use a private class which implements the corresponding interface (but if the interface is a functional interface, then the closest equivalent is to replace the functional interface with a function pointer and the anonymous inner class with a lambda). See more here . Python In Python, you can use the type(name, bases, dict) builtin function to crate on the fly. For example: 1 2 3 4 5 class ParentClass : pass op = type ( \"ChildClass\" , ( ParentClass , object ), { \"foo\" : lambda self : print ( \"foo\" )}) op () . foo ()","title":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/4.%20Exceptions%2C%20Assertions%2C%20and%20Logging/4.%20Exceptions%2C%20Assertions%2C%20and%20Logging/#chapter-6-interfaces-lambda-expressions-and-inner-classes","text":"","title":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/4.%20Exceptions%2C%20Assertions%2C%20and%20Logging/4.%20Exceptions%2C%20Assertions%2C%20and%20Logging/#anonymous-inner-class","text":"If you want to make only a single object of this class, you don't even need to give the class a name. Such a class is called an anonymous inner class . Anonymous classes cannot have a constructor (in C++ and Java) but can have a destructor (this is for C++; there's no destructor in Java, instead we have Garbage Collector in Java). Anonymous Inner Class Java 1 2 3 4 5 6 var obj = new SuperType ( construction parameters ) { // even though an anonymous class cannot have constructors, // you can provide an object initialization block { initialization } ... } The SuperType can be an interface, then the inner class implements that interface. It can also be a class, then the inner class extends that class. C++ There is no equivalent such a concept in C++, although the concept of anonymous class exists. To declare an anonymous class and its variables, just ignore the class name, as in: 1 2 3 4 5 6 class { public : void f () { std :: cout << \"I am an object of an anonymous class.\" << std :: endl ; } } obj1 , obj2 ; The closest equivalent to Java anonymous inner classes in C++ is to use a private class which implements the corresponding interface (but if the interface is a functional interface, then the closest equivalent is to replace the functional interface with a function pointer and the anonymous inner class with a lambda). See more here . Python In Python, you can use the type(name, bases, dict) builtin function to crate on the fly. For example: 1 2 3 4 5 class ParentClass : pass op = type ( \"ChildClass\" , ( ParentClass , object ), { \"foo\" : lambda self : print ( \"foo\" )}) op () . foo ()","title":"Anonymous Inner Class"},{"location":"1.%20Quant%20Developer/2.%20Java/5.%20Genereic%20Programming/5.%20Genereic%20Programming/","text":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes Anonymous Inner Class If you want to make only a single object of this class, you don't even need to give the class a name. Such a class is called an anonymous inner class . Anonymous classes cannot have a constructor (in C++ and Java) but can have a destructor (this is for C++; there's no destructor in Java, instead we have Garbage Collector in Java). Anonymous Inner Class Java 1 2 3 4 5 6 var obj = new SuperType ( construction parameters ) { // even though an anonymous class cannot have constructors, // you can provide an object initialization block { initialization } ... } The SuperType can be an interface, then the inner class implements that interface. It can also be a class, then the inner class extends that class. C++ There is no equivalent such a concept in C++, although the concept of anonymous class exists. To declare an anonymous class and its variables, just ignore the class name, as in: 1 2 3 4 5 6 class { public : void f () { std :: cout << \"I am an object of an anonymous class.\" << std :: endl ; } } obj1 , obj2 ; The closest equivalent to Java anonymous inner classes in C++ is to use a private class which implements the corresponding interface (but if the interface is a functional interface, then the closest equivalent is to replace the functional interface with a function pointer and the anonymous inner class with a lambda). See more here . Python In Python, you can use the type(name, bases, dict) builtin function to crate on the fly. For example: 1 2 3 4 5 class ParentClass : pass op = type ( \"ChildClass\" , ( ParentClass , object ), { \"foo\" : lambda self : print ( \"foo\" )}) op () . foo ()","title":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/5.%20Genereic%20Programming/5.%20Genereic%20Programming/#chapter-6-interfaces-lambda-expressions-and-inner-classes","text":"","title":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/5.%20Genereic%20Programming/5.%20Genereic%20Programming/#anonymous-inner-class","text":"If you want to make only a single object of this class, you don't even need to give the class a name. Such a class is called an anonymous inner class . Anonymous classes cannot have a constructor (in C++ and Java) but can have a destructor (this is for C++; there's no destructor in Java, instead we have Garbage Collector in Java). Anonymous Inner Class Java 1 2 3 4 5 6 var obj = new SuperType ( construction parameters ) { // even though an anonymous class cannot have constructors, // you can provide an object initialization block { initialization } ... } The SuperType can be an interface, then the inner class implements that interface. It can also be a class, then the inner class extends that class. C++ There is no equivalent such a concept in C++, although the concept of anonymous class exists. To declare an anonymous class and its variables, just ignore the class name, as in: 1 2 3 4 5 6 class { public : void f () { std :: cout << \"I am an object of an anonymous class.\" << std :: endl ; } } obj1 , obj2 ; The closest equivalent to Java anonymous inner classes in C++ is to use a private class which implements the corresponding interface (but if the interface is a functional interface, then the closest equivalent is to replace the functional interface with a function pointer and the anonymous inner class with a lambda). See more here . Python In Python, you can use the type(name, bases, dict) builtin function to crate on the fly. For example: 1 2 3 4 5 class ParentClass : pass op = type ( \"ChildClass\" , ( ParentClass , object ), { \"foo\" : lambda self : print ( \"foo\" )}) op () . foo ()","title":"Anonymous Inner Class"},{"location":"1.%20Quant%20Developer/2.%20Java/6.%20Collections/6.%20Collections/","text":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes Anonymous Inner Class If you want to make only a single object of this class, you don't even need to give the class a name. Such a class is called an anonymous inner class . Anonymous classes cannot have a constructor (in C++ and Java) but can have a destructor (this is for C++; there's no destructor in Java, instead we have Garbage Collector in Java). Anonymous Inner Class Java 1 2 3 4 5 6 var obj = new SuperType ( construction parameters ) { // even though an anonymous class cannot have constructors, // you can provide an object initialization block { initialization } ... } The SuperType can be an interface, then the inner class implements that interface. It can also be a class, then the inner class extends that class. C++ There is no equivalent such a concept in C++, although the concept of anonymous class exists. To declare an anonymous class and its variables, just ignore the class name, as in: 1 2 3 4 5 6 class { public : void f () { std :: cout << \"I am an object of an anonymous class.\" << std :: endl ; } } obj1 , obj2 ; The closest equivalent to Java anonymous inner classes in C++ is to use a private class which implements the corresponding interface (but if the interface is a functional interface, then the closest equivalent is to replace the functional interface with a function pointer and the anonymous inner class with a lambda). See more here . Python In Python, you can use the type(name, bases, dict) builtin function to crate on the fly. For example: 1 2 3 4 5 class ParentClass : pass op = type ( \"ChildClass\" , ( ParentClass , object ), { \"foo\" : lambda self : print ( \"foo\" )}) op () . foo ()","title":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/6.%20Collections/6.%20Collections/#chapter-6-interfaces-lambda-expressions-and-inner-classes","text":"","title":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/6.%20Collections/6.%20Collections/#anonymous-inner-class","text":"If you want to make only a single object of this class, you don't even need to give the class a name. Such a class is called an anonymous inner class . Anonymous classes cannot have a constructor (in C++ and Java) but can have a destructor (this is for C++; there's no destructor in Java, instead we have Garbage Collector in Java). Anonymous Inner Class Java 1 2 3 4 5 6 var obj = new SuperType ( construction parameters ) { // even though an anonymous class cannot have constructors, // you can provide an object initialization block { initialization } ... } The SuperType can be an interface, then the inner class implements that interface. It can also be a class, then the inner class extends that class. C++ There is no equivalent such a concept in C++, although the concept of anonymous class exists. To declare an anonymous class and its variables, just ignore the class name, as in: 1 2 3 4 5 6 class { public : void f () { std :: cout << \"I am an object of an anonymous class.\" << std :: endl ; } } obj1 , obj2 ; The closest equivalent to Java anonymous inner classes in C++ is to use a private class which implements the corresponding interface (but if the interface is a functional interface, then the closest equivalent is to replace the functional interface with a function pointer and the anonymous inner class with a lambda). See more here . Python In Python, you can use the type(name, bases, dict) builtin function to crate on the fly. For example: 1 2 3 4 5 class ParentClass : pass op = type ( \"ChildClass\" , ( ParentClass , object ), { \"foo\" : lambda self : print ( \"foo\" )}) op () . foo ()","title":"Anonymous Inner Class"},{"location":"1.%20Quant%20Developer/2.%20Java/7.%20Concurrency/7.%20Concurrency/","text":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes Anonymous Inner Class If you want to make only a single object of this class, you don't even need to give the class a name. Such a class is called an anonymous inner class . Anonymous classes cannot have a constructor (in C++ and Java) but can have a destructor (this is for C++; there's no destructor in Java, instead we have Garbage Collector in Java). Anonymous Inner Class Java 1 2 3 4 5 6 var obj = new SuperType ( construction parameters ) { // even though an anonymous class cannot have constructors, // you can provide an object initialization block { initialization } ... } The SuperType can be an interface, then the inner class implements that interface. It can also be a class, then the inner class extends that class. C++ There is no equivalent such a concept in C++, although the concept of anonymous class exists. To declare an anonymous class and its variables, just ignore the class name, as in: 1 2 3 4 5 6 class { public : void f () { std :: cout << \"I am an object of an anonymous class.\" << std :: endl ; } } obj1 , obj2 ; The closest equivalent to Java anonymous inner classes in C++ is to use a private class which implements the corresponding interface (but if the interface is a functional interface, then the closest equivalent is to replace the functional interface with a function pointer and the anonymous inner class with a lambda). See more here . Python In Python, you can use the type(name, bases, dict) builtin function to crate on the fly. For example: 1 2 3 4 5 class ParentClass : pass op = type ( \"ChildClass\" , ( ParentClass , object ), { \"foo\" : lambda self : print ( \"foo\" )}) op () . foo ()","title":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/7.%20Concurrency/7.%20Concurrency/#chapter-6-interfaces-lambda-expressions-and-inner-classes","text":"","title":"Chapter 6. Interfaces, Lambda Expressions, and Inner Classes"},{"location":"1.%20Quant%20Developer/2.%20Java/7.%20Concurrency/7.%20Concurrency/#anonymous-inner-class","text":"If you want to make only a single object of this class, you don't even need to give the class a name. Such a class is called an anonymous inner class . Anonymous classes cannot have a constructor (in C++ and Java) but can have a destructor (this is for C++; there's no destructor in Java, instead we have Garbage Collector in Java). Anonymous Inner Class Java 1 2 3 4 5 6 var obj = new SuperType ( construction parameters ) { // even though an anonymous class cannot have constructors, // you can provide an object initialization block { initialization } ... } The SuperType can be an interface, then the inner class implements that interface. It can also be a class, then the inner class extends that class. C++ There is no equivalent such a concept in C++, although the concept of anonymous class exists. To declare an anonymous class and its variables, just ignore the class name, as in: 1 2 3 4 5 6 class { public : void f () { std :: cout << \"I am an object of an anonymous class.\" << std :: endl ; } } obj1 , obj2 ; The closest equivalent to Java anonymous inner classes in C++ is to use a private class which implements the corresponding interface (but if the interface is a functional interface, then the closest equivalent is to replace the functional interface with a function pointer and the anonymous inner class with a lambda). See more here . Python In Python, you can use the type(name, bases, dict) builtin function to crate on the fly. For example: 1 2 3 4 5 class ParentClass : pass op = type ( \"ChildClass\" , ( ParentClass , object ), { \"foo\" : lambda self : print ( \"foo\" )}) op () . foo ()","title":"Anonymous Inner Class"},{"location":"1.%20Quant%20Developer/2.%20Java/8.%20Meta%20Programming/8.%20Meta%20Programming/","text":"Python Meta Programming There are five main meta programming techniques in Python: At load-time: - Operator overloading - Decorator - Metaclass - Descriptor and Property - Import hook At run-time: - compile - Monkey Patch and Hot Patch Import Hooks Whenever you use an import statement, it is equivalent to: 1 os = __import__ ( \"os\" ) First, it check sys.modules , a dict containing already-loaded modules, just in case we've already imported the requested module. Next, if sys.meta_path list is not empty, then every meta importer hook in it will be queried. Finally, it checks sys.path , a list containing filesystem paths for Python to search for potential modules. It is at the second step that we will be able to intercept. To do this, we'll need to crate a meta path finder , which has a single public method find_spec , and add it to sys.meta_path . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import importlib.abc import importlib.machinery class DependencyInjectorFinder ( importlib . abc . MetaPathFinder ): def __init__ ( self , loader ): # we'll write the loader in a minute, hang tight self . _loader = loader def find_spec ( self , fullname , path , target = None ): \"\"\"Attempt to locate the requested module fullname is the fully-qualified name of the module, path is set to __path__ for sub-modules/packages, or None otherwise. target can be a module object, but is unused in this example. \"\"\" if self . _loader . provides ( fullname ): return self . _gen_spec ( fullname ) def _gen_spec ( self , fullname ): spec = importlib . machinery . ModuleSpec ( fullname , self . _loader ) return spec # we'll also add it to sys.meta_path later If a meta path finder provides the requested module, then it should return an instance of the importlib.machinery.ModuleSpec class, which is a fairly simple affair with a small handful of attributes that lets Python's import machinery know what it needs to know to take the next steps in importing the module the user requested. For our purposes, we're interested in two attributes (the only required ones): ModuleSpec.name, which is the name of the requested module, and ModuleSpec.loader, which is the loader object that Python should use to actually load the module - you'll notice the self._loader lines above that reference a loader object, as well. A loader object is a very simple class with two required methods in Python: create_module , which takes a ModuleSpec as its sole argument and returns an object that Python will consider to be the new module, and exec_module , which takes the new module as its sole argument and executes it. 1 2 3 4 5 class Loader ( importlib . abc . Loader ): def create_module ( self , spec ): raise NotImplementedError def exec_module ( self , module ): raise NotImplementedError","title":"Python Meta Programming"},{"location":"1.%20Quant%20Developer/2.%20Java/8.%20Meta%20Programming/8.%20Meta%20Programming/#python-meta-programming","text":"There are five main meta programming techniques in Python: At load-time: - Operator overloading - Decorator - Metaclass - Descriptor and Property - Import hook At run-time: - compile - Monkey Patch and Hot Patch","title":"Python Meta Programming"},{"location":"1.%20Quant%20Developer/2.%20Java/8.%20Meta%20Programming/8.%20Meta%20Programming/#import-hooks","text":"Whenever you use an import statement, it is equivalent to: 1 os = __import__ ( \"os\" ) First, it check sys.modules , a dict containing already-loaded modules, just in case we've already imported the requested module. Next, if sys.meta_path list is not empty, then every meta importer hook in it will be queried. Finally, it checks sys.path , a list containing filesystem paths for Python to search for potential modules. It is at the second step that we will be able to intercept. To do this, we'll need to crate a meta path finder , which has a single public method find_spec , and add it to sys.meta_path . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import importlib.abc import importlib.machinery class DependencyInjectorFinder ( importlib . abc . MetaPathFinder ): def __init__ ( self , loader ): # we'll write the loader in a minute, hang tight self . _loader = loader def find_spec ( self , fullname , path , target = None ): \"\"\"Attempt to locate the requested module fullname is the fully-qualified name of the module, path is set to __path__ for sub-modules/packages, or None otherwise. target can be a module object, but is unused in this example. \"\"\" if self . _loader . provides ( fullname ): return self . _gen_spec ( fullname ) def _gen_spec ( self , fullname ): spec = importlib . machinery . ModuleSpec ( fullname , self . _loader ) return spec # we'll also add it to sys.meta_path later If a meta path finder provides the requested module, then it should return an instance of the importlib.machinery.ModuleSpec class, which is a fairly simple affair with a small handful of attributes that lets Python's import machinery know what it needs to know to take the next steps in importing the module the user requested. For our purposes, we're interested in two attributes (the only required ones): ModuleSpec.name, which is the name of the requested module, and ModuleSpec.loader, which is the loader object that Python should use to actually load the module - you'll notice the self._loader lines above that reference a loader object, as well. A loader object is a very simple class with two required methods in Python: create_module , which takes a ModuleSpec as its sole argument and returns an object that Python will consider to be the new module, and exec_module , which takes the new module as its sole argument and executes it. 1 2 3 4 5 class Loader ( importlib . abc . Loader ): def create_module ( self , spec ): raise NotImplementedError def exec_module ( self , module ): raise NotImplementedError","title":"Import Hooks"},{"location":"1.%20Quant%20Developer/3.%20Python/","text":"Index Python: Python + Ipython (\u5ed6\u96ea\u5cf0\uff0cLearning Python, Python\u6e90\u7801\u5256\u6790) Data Science: NumPy + SciPy + Pandas + Matplotlib (Python for Data Analysis) Machine Learning: Scikit-learn Deep Learning: Tensorflow + NLTK [https://see.stanford.edu/Course/CS107 Progamming Paradigms] [https://www.amazon.com/Computer-Systems-Programmers-Perspective-3rd/dp/013409266X CSAPP] Learning Python Python Cookbook Effective Python Fluent Python [http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000 Python\u6559\u7a0b] Include this in the first line of the python code: #! \\/usr\\/bin\\/env python Every file of Python source code whose name ends in a /.py/ extension is a /module/. An /attribute/ is simply a variable name that is attached to a specific object (like a module). The build-in /dir/ function can be used to list all the names available inside a module. Everything in Python is an object, and almost everything has attributes and methods. Six main build-in data types: numbers, strings, lists, dictionaries, tuples, and sets. /Literals/ are the expressions that generate objects, e.g., 'spam' is a literal that generates a string object. Both lists and dictionaries may be nested, can grow and shrink on demand, and may contain objects of any type. Difference between lists and tuples: lists are /mutable/ while tuples are /immutable/. Python is /dynamically/ and /strongly/ typed: dynamic typing is a model that tracks the type automatically instead of requiring declaration code, and strongly typed is a constraint that you can perform only the operations that are valid for its type. Reference acts like pointers. math, random,","title":"Index"},{"location":"1.%20Quant%20Developer/3.%20Python/#index","text":"Python: Python + Ipython (\u5ed6\u96ea\u5cf0\uff0cLearning Python, Python\u6e90\u7801\u5256\u6790) Data Science: NumPy + SciPy + Pandas + Matplotlib (Python for Data Analysis) Machine Learning: Scikit-learn Deep Learning: Tensorflow + NLTK [https://see.stanford.edu/Course/CS107 Progamming Paradigms] [https://www.amazon.com/Computer-Systems-Programmers-Perspective-3rd/dp/013409266X CSAPP] Learning Python Python Cookbook Effective Python Fluent Python [http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000 Python\u6559\u7a0b] Include this in the first line of the python code: #! \\/usr\\/bin\\/env python Every file of Python source code whose name ends in a /.py/ extension is a /module/. An /attribute/ is simply a variable name that is attached to a specific object (like a module). The build-in /dir/ function can be used to list all the names available inside a module. Everything in Python is an object, and almost everything has attributes and methods. Six main build-in data types: numbers, strings, lists, dictionaries, tuples, and sets. /Literals/ are the expressions that generate objects, e.g., 'spam' is a literal that generates a string object. Both lists and dictionaries may be nested, can grow and shrink on demand, and may contain objects of any type. Difference between lists and tuples: lists are /mutable/ while tuples are /immutable/. Python is /dynamically/ and /strongly/ typed: dynamic typing is a model that tracks the type automatically instead of requiring declaration code, and strongly typed is a constraint that you can perform only the operations that are valid for its type. Reference acts like pointers. math, random,","title":"Index"},{"location":"1.%20Quant%20Developer/4.%20Design%20Patterns/","text":"Design Patterns Interceptor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from functools import wraps def iterceptor ( func ): print ( 'this is executed at function definition time (def my_func)' ) @wraps ( func ) def wrapper ( * args , ** kwargs ): print ( 'this is executed before function call' ) result = func ( * args , ** kwargs ) print ( 'this is executed after function call' ) return result return wrapper @iterceptor def my_func ( n ): print ( 'this is my_func' ) print ( 'n =' , n ) my_func ( 4 ) Facade","title":"Design Patterns"},{"location":"1.%20Quant%20Developer/4.%20Design%20Patterns/#design-patterns","text":"","title":"Design Patterns"},{"location":"1.%20Quant%20Developer/4.%20Design%20Patterns/#interceptor","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from functools import wraps def iterceptor ( func ): print ( 'this is executed at function definition time (def my_func)' ) @wraps ( func ) def wrapper ( * args , ** kwargs ): print ( 'this is executed before function call' ) result = func ( * args , ** kwargs ) print ( 'this is executed after function call' ) return result return wrapper @iterceptor def my_func ( n ): print ( 'this is my_func' ) print ( 'n =' , n ) my_func ( 4 )","title":"Interceptor"},{"location":"1.%20Quant%20Developer/4.%20Design%20Patterns/#facade","text":"","title":"Facade"},{"location":"1.%20Quant%20Developer/5.%20System%20Design/","text":"SOLID First introduced by Robert C. Martin in 2000, SOLID stands for: Single-responsibility principle: Every class should have only one responsibility. Open-closed principle: \"Software entitles should be open for extension, but closed for modification.\" Liskov substitution principle: \"Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.\" Interface segregation principle: \"Many client-specific interfaces are better than one general-purpose interface.\" Dependency inversion principle: \"Depend upon abstractions, [not] concretions.\"","title":"SOLID"},{"location":"1.%20Quant%20Developer/5.%20System%20Design/#solid","text":"First introduced by Robert C. Martin in 2000, SOLID stands for: Single-responsibility principle: Every class should have only one responsibility. Open-closed principle: \"Software entitles should be open for extension, but closed for modification.\" Liskov substitution principle: \"Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.\" Interface segregation principle: \"Many client-specific interfaces are better than one general-purpose interface.\" Dependency inversion principle: \"Depend upon abstractions, [not] concretions.\"","title":"SOLID"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Adhoc/Adhoc/","text":"Adhoc (1) Introduction Adhoc problems. Problems (0, 1, 0) LC73. Set Matrix Zeroes (Medium) LC73. Set Matrix Zeroes (Medium) Info LC73. Set Matrix Zeroes (Medium) Algorithm: Adhoc Time Complexity: \\(O(n^2)\\) Space Complexity: \\(O(1)\\) Solution This is an Adhoc problem. Adhoc \\(O(n^2)\\) Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution : def setZeroes ( self , matrix : List [ List [ int ]]) -> None : \"\"\" Do not return anything, modify matrix in-place instead. \"\"\" # pre-processing to check the first row and the first column firstRowHasZero = any ([ matrix [ 0 ][ j ] == 0 for j in range ( len ( matrix [ 0 ]))]) firstColHasZero = any ([ matrix [ i ][ 0 ] == 0 for i in range ( len ( matrix ))]) # KEY: check each element and record the results in the first row and the first column for i in range ( len ( matrix )): for j in range ( len ( matrix [ 0 ])): if matrix [ i ][ j ] == 0 : matrix [ i ][ 0 ] = matrix [ 0 ][ j ] = 0 # sweep for i in range ( 1 , len ( matrix )): # starts from 1, not 0 if matrix [ i ][ 0 ] == 0 : for j in range ( len ( matrix [ 0 ])): matrix [ i ][ j ] = 0 for j in range ( 1 , len ( matrix [ 0 ])): # starts from 1, not 0 if matrix [ 0 ][ j ] == 0 : for i in range ( len ( matrix )): matrix [ i ][ j ] = 0 # post-processing if firstColHasZero : for i in range ( len ( matrix )): matrix [ i ][ 0 ] = 0 if firstRowHasZero : for j in range ( len ( matrix [ 0 ])): matrix [ 0 ][ j ] = 0","title":"Adhoc (1)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Adhoc/Adhoc/#adhoc-1","text":"","title":"Adhoc (1)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Adhoc/Adhoc/#introduction","text":"Adhoc problems.","title":"Introduction"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Adhoc/Adhoc/#problems-0-1-0","text":"","title":"Problems (0, 1, 0)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Adhoc/Adhoc/#lc73-set-matrix-zeroes-medium","text":"LC73. Set Matrix Zeroes (Medium) Info LC73. Set Matrix Zeroes (Medium) Algorithm: Adhoc Time Complexity: \\(O(n^2)\\) Space Complexity: \\(O(1)\\) Solution This is an Adhoc problem. Adhoc \\(O(n^2)\\) Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution : def setZeroes ( self , matrix : List [ List [ int ]]) -> None : \"\"\" Do not return anything, modify matrix in-place instead. \"\"\" # pre-processing to check the first row and the first column firstRowHasZero = any ([ matrix [ 0 ][ j ] == 0 for j in range ( len ( matrix [ 0 ]))]) firstColHasZero = any ([ matrix [ i ][ 0 ] == 0 for i in range ( len ( matrix ))]) # KEY: check each element and record the results in the first row and the first column for i in range ( len ( matrix )): for j in range ( len ( matrix [ 0 ])): if matrix [ i ][ j ] == 0 : matrix [ i ][ 0 ] = matrix [ 0 ][ j ] = 0 # sweep for i in range ( 1 , len ( matrix )): # starts from 1, not 0 if matrix [ i ][ 0 ] == 0 : for j in range ( len ( matrix [ 0 ])): matrix [ i ][ j ] = 0 for j in range ( 1 , len ( matrix [ 0 ])): # starts from 1, not 0 if matrix [ 0 ][ j ] == 0 : for i in range ( len ( matrix )): matrix [ i ][ j ] = 0 # post-processing if firstColHasZero : for i in range ( len ( matrix )): matrix [ i ][ 0 ] = 0 if firstRowHasZero : for j in range ( len ( matrix [ 0 ])): matrix [ 0 ][ j ] = 0","title":"LC73. Set Matrix Zeroes (Medium)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Astar%20Search/","text":"BFS == \u57fa\u7840\u77e5\u8bc6\uff1a \u5e38\u89c1\u7684BFS\u7528\u6765\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\uff1f(1) \u7b80\u5355\u56fe\uff08\u6709\u5411\u65e0\u5411\u7686\u53ef\uff09\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff082\uff09\u62d3\u6251\u6392\u5e8f \uff083\uff09 \u904d\u5386\u4e00\u4e2a\u56fe\uff08\u6216\u8005\u6811\uff09 BFS\u57fa\u672c\u6a21\u677f\uff08\u9700\u8981\u8bb0\u5f55\u5c42\u6570\u6216\u8005\u4e0d\u9700\u8981\u8bb0\u5f55\u5c42\u6570\uff09 \u591a\u6570\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662fO\uff08N+M\uff09\uff0cN\u4e3a\u8282\u70b9\u4e2a\u6570\uff0cM\u4e3a\u8fb9\u7684\u4e2a\u6570 == \u57fa\u4e8e\u6811\u7684BFS\uff1a\u4e0d\u9700\u8981\u4e13\u95e8\u4e00\u4e2aset\u6765\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9 - Leetcode 102 Binary Tree Level Order Traversal - Leetcode 103 Binary Tree Zigzag Level Order Traversal - Leetcode 297 Serialize and Deserialize Binary Tree \uff08\u5f88\u597d\u7684BFS\u548c\u53cc\u6307\u9488\u7ed3\u5408\u7684\u9898\uff09 - Leetcode 374 Binary Tree Vertical Order Traversal == \u57fa\u4e8e\u56fe\u7684BFS\uff1a\uff08\u4e00\u822c\u9700\u8981\u4e00\u4e2aset\u6765\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff09 - Leetcode 200. Number of Islands - Leetcode 133. Clone Graph - Leetcode 127. Word Ladder - Leetcode 490. The Maze - Leetcode 323. Connected Component in Undirected Graph - Leetcode 130. Surrounded Regions - Leetcode 752. Open the Lock - Leetcode 815. Bus Routes - Leetcode 1091. Shortest Path in Binary Matrix - Leetcode 542. 01 Matrix - Leetcode 1293. Shortest Path in a Grid with Obstacles Elimination == \u62d3\u6251\u6392\u5e8f\uff1a\uff08https://zh.wikipedia.org/wiki/%E6%8B%93%E6%92%B2%E6%8E%92%E5%BA%8F\uff09 - Leetcode 207 Course Schedule \uff08I, II\uff09 - Leetcode 444 Sequence Reconstruction - Leetcode 269 Alien Dictionary","title":"BFS"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Astar%20Search/#bfs","text":"== \u57fa\u7840\u77e5\u8bc6\uff1a \u5e38\u89c1\u7684BFS\u7528\u6765\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\uff1f(1) \u7b80\u5355\u56fe\uff08\u6709\u5411\u65e0\u5411\u7686\u53ef\uff09\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff082\uff09\u62d3\u6251\u6392\u5e8f \uff083\uff09 \u904d\u5386\u4e00\u4e2a\u56fe\uff08\u6216\u8005\u6811\uff09 BFS\u57fa\u672c\u6a21\u677f\uff08\u9700\u8981\u8bb0\u5f55\u5c42\u6570\u6216\u8005\u4e0d\u9700\u8981\u8bb0\u5f55\u5c42\u6570\uff09 \u591a\u6570\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662fO\uff08N+M\uff09\uff0cN\u4e3a\u8282\u70b9\u4e2a\u6570\uff0cM\u4e3a\u8fb9\u7684\u4e2a\u6570 == \u57fa\u4e8e\u6811\u7684BFS\uff1a\u4e0d\u9700\u8981\u4e13\u95e8\u4e00\u4e2aset\u6765\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9 - Leetcode 102 Binary Tree Level Order Traversal - Leetcode 103 Binary Tree Zigzag Level Order Traversal - Leetcode 297 Serialize and Deserialize Binary Tree \uff08\u5f88\u597d\u7684BFS\u548c\u53cc\u6307\u9488\u7ed3\u5408\u7684\u9898\uff09 - Leetcode 374 Binary Tree Vertical Order Traversal == \u57fa\u4e8e\u56fe\u7684BFS\uff1a\uff08\u4e00\u822c\u9700\u8981\u4e00\u4e2aset\u6765\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff09 - Leetcode 200. Number of Islands - Leetcode 133. Clone Graph - Leetcode 127. Word Ladder - Leetcode 490. The Maze - Leetcode 323. Connected Component in Undirected Graph - Leetcode 130. Surrounded Regions - Leetcode 752. Open the Lock - Leetcode 815. Bus Routes - Leetcode 1091. Shortest Path in Binary Matrix - Leetcode 542. 01 Matrix - Leetcode 1293. Shortest Path in a Grid with Obstacles Elimination == \u62d3\u6251\u6392\u5e8f\uff1a\uff08https://zh.wikipedia.org/wiki/%E6%8B%93%E6%92%B2%E6%8E%92%E5%BA%8F\uff09 - Leetcode 207 Course Schedule \uff08I, II\uff09 - Leetcode 444 Sequence Reconstruction - Leetcode 269 Alien Dictionary","title":"BFS"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/BFS/","text":"BFS == \u57fa\u7840\u77e5\u8bc6\uff1a \u5e38\u89c1\u7684BFS\u7528\u6765\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\uff1f(1) \u7b80\u5355\u56fe\uff08\u6709\u5411\u65e0\u5411\u7686\u53ef\uff09\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff082\uff09\u62d3\u6251\u6392\u5e8f \uff083\uff09 \u904d\u5386\u4e00\u4e2a\u56fe\uff08\u6216\u8005\u6811\uff09 BFS\u57fa\u672c\u6a21\u677f\uff08\u9700\u8981\u8bb0\u5f55\u5c42\u6570\u6216\u8005\u4e0d\u9700\u8981\u8bb0\u5f55\u5c42\u6570\uff09 \u591a\u6570\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662fO\uff08N+M\uff09\uff0cN\u4e3a\u8282\u70b9\u4e2a\u6570\uff0cM\u4e3a\u8fb9\u7684\u4e2a\u6570 == \u57fa\u4e8e\u6811\u7684BFS\uff1a\u4e0d\u9700\u8981\u4e13\u95e8\u4e00\u4e2aset\u6765\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9 - Leetcode 102 Binary Tree Level Order Traversal - Leetcode 103 Binary Tree Zigzag Level Order Traversal - Leetcode 297 Serialize and Deserialize Binary Tree \uff08\u5f88\u597d\u7684BFS\u548c\u53cc\u6307\u9488\u7ed3\u5408\u7684\u9898\uff09 - Leetcode 374 Binary Tree Vertical Order Traversal == \u57fa\u4e8e\u56fe\u7684BFS\uff1a\uff08\u4e00\u822c\u9700\u8981\u4e00\u4e2aset\u6765\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff09 - Leetcode 200. Number of Islands - Leetcode 133. Clone Graph - Leetcode 127. Word Ladder - Leetcode 490. The Maze - Leetcode 323. Connected Component in Undirected Graph - Leetcode 130. Surrounded Regions - Leetcode 752. Open the Lock - Leetcode 815. Bus Routes - Leetcode 1091. Shortest Path in Binary Matrix - Leetcode 542. 01 Matrix - Leetcode 1293. Shortest Path in a Grid with Obstacles Elimination == \u62d3\u6251\u6392\u5e8f\uff1a\uff08https://zh.wikipedia.org/wiki/%E6%8B%93%E6%92%B2%E6%8E%92%E5%BA%8F\uff09 - Leetcode 207 Course Schedule \uff08I, II\uff09 - Leetcode 444 Sequence Reconstruction - Leetcode 269 Alien Dictionary","title":"BFS"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/BFS/#bfs","text":"== \u57fa\u7840\u77e5\u8bc6\uff1a \u5e38\u89c1\u7684BFS\u7528\u6765\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\uff1f(1) \u7b80\u5355\u56fe\uff08\u6709\u5411\u65e0\u5411\u7686\u53ef\uff09\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff082\uff09\u62d3\u6251\u6392\u5e8f \uff083\uff09 \u904d\u5386\u4e00\u4e2a\u56fe\uff08\u6216\u8005\u6811\uff09 BFS\u57fa\u672c\u6a21\u677f\uff08\u9700\u8981\u8bb0\u5f55\u5c42\u6570\u6216\u8005\u4e0d\u9700\u8981\u8bb0\u5f55\u5c42\u6570\uff09 \u591a\u6570\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662fO\uff08N+M\uff09\uff0cN\u4e3a\u8282\u70b9\u4e2a\u6570\uff0cM\u4e3a\u8fb9\u7684\u4e2a\u6570 == \u57fa\u4e8e\u6811\u7684BFS\uff1a\u4e0d\u9700\u8981\u4e13\u95e8\u4e00\u4e2aset\u6765\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9 - Leetcode 102 Binary Tree Level Order Traversal - Leetcode 103 Binary Tree Zigzag Level Order Traversal - Leetcode 297 Serialize and Deserialize Binary Tree \uff08\u5f88\u597d\u7684BFS\u548c\u53cc\u6307\u9488\u7ed3\u5408\u7684\u9898\uff09 - Leetcode 374 Binary Tree Vertical Order Traversal == \u57fa\u4e8e\u56fe\u7684BFS\uff1a\uff08\u4e00\u822c\u9700\u8981\u4e00\u4e2aset\u6765\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff09 - Leetcode 200. Number of Islands - Leetcode 133. Clone Graph - Leetcode 127. Word Ladder - Leetcode 490. The Maze - Leetcode 323. Connected Component in Undirected Graph - Leetcode 130. Surrounded Regions - Leetcode 752. Open the Lock - Leetcode 815. Bus Routes - Leetcode 1091. Shortest Path in Binary Matrix - Leetcode 542. 01 Matrix - Leetcode 1293. Shortest Path in a Grid with Obstacles Elimination == \u62d3\u6251\u6392\u5e8f\uff1a\uff08https://zh.wikipedia.org/wiki/%E6%8B%93%E6%92%B2%E6%8E%92%E5%BA%8F\uff09 - Leetcode 207 Course Schedule \uff08I, II\uff09 - Leetcode 444 Sequence Reconstruction - Leetcode 269 Alien Dictionary","title":"BFS"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Binary%20Search/","text":"Binary Search \u57fa\u7840\u77e5\u8bc6\uff1a\u4e8c\u5206\u6cd5\u662f\u7528\u6765\u89e3\u6cd5\u57fa\u672c\u6a21\u677f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6logN\uff1b\u5e38\u89c1\u7684\u4e8c\u5206\u6cd5\u9898\u76ee\u53ef\u4ee5\u5206\u4e3a\u4e24\u5927\u7c7b\uff0c\u663e\u5f0f\u4e0e\u9690\u5f0f\uff0c\u5373\u662f\u5426\u80fd\u4ece\u5b57\u9762\u4e0a\u4e00\u773c\u770b\u51fa\u4e8c\u5206\u6cd5\u7684\u7279\u70b9\uff1a\u8981\u67e5\u627e\u7684\u6570\u636e\u662f\u5426\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u524d\u534a\u90e8\u5206\u4e3aX\uff0c\u540e\u534a\u90e8\u5206\u4e3aO == \u663e\u5f0f\u4e8c\u5206\u6cd5\uff1a - Leetcode 34. Find First and Last Position of Element in Sorted Array - Leetcode 33. Search in Rotated Sorted Array - Leetcode 1095. Find in Mountain Array - Leetcode 162. Find Peak Element - Leetcode 278. First Bad Version - Leetcode 74. Search a 2D Matrix - Leetcode 240. Search a 2D Matrix II == \u9690\u5f0f\u4e8c\u5206\u6cd5\uff1a - Leetcode 69. Sqrt(x) - Leetcode 540. Single Element in a Sorted Array - Leetcode 644. Maximum Average Subarray II - Leetcode 528. Random Pick with Weight - Leetcode 1300. Sum of Mutated Array Closest to Target - Leetcode 1060. Missing Element in Sorted Array \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u4e8c\u5206\u67e5\u627e\u5e94\u7528(\u7b80\u5355) 374\u300135\u3001278\u3001367\u300169\u3001441 \u4e8c\u5206\u67e5\u627e\u5e94\u7528(\u4e2d\u7b49) 34\u3001540\u3001275\u3001436\u3001300\u3001354\u3001658\u3001162\u30014 \u4e8c\u5206\u67e5\u627e\u4e0e\u65cb\u8f6c\u6570\u7ec4 153\u3001154\u300133\u300181 \u4e8c\u5206\u67e5\u627e\u4e0e\u77e9\u9635 74\u3001240 \u4e8c\u5206\u7b54\u6848\u6cd5 378\u3001668\u3001410\u3001483","title":"Binary Search"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Binary%20Search/#binary-search","text":"\u57fa\u7840\u77e5\u8bc6\uff1a\u4e8c\u5206\u6cd5\u662f\u7528\u6765\u89e3\u6cd5\u57fa\u672c\u6a21\u677f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6logN\uff1b\u5e38\u89c1\u7684\u4e8c\u5206\u6cd5\u9898\u76ee\u53ef\u4ee5\u5206\u4e3a\u4e24\u5927\u7c7b\uff0c\u663e\u5f0f\u4e0e\u9690\u5f0f\uff0c\u5373\u662f\u5426\u80fd\u4ece\u5b57\u9762\u4e0a\u4e00\u773c\u770b\u51fa\u4e8c\u5206\u6cd5\u7684\u7279\u70b9\uff1a\u8981\u67e5\u627e\u7684\u6570\u636e\u662f\u5426\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u524d\u534a\u90e8\u5206\u4e3aX\uff0c\u540e\u534a\u90e8\u5206\u4e3aO == \u663e\u5f0f\u4e8c\u5206\u6cd5\uff1a - Leetcode 34. Find First and Last Position of Element in Sorted Array - Leetcode 33. Search in Rotated Sorted Array - Leetcode 1095. Find in Mountain Array - Leetcode 162. Find Peak Element - Leetcode 278. First Bad Version - Leetcode 74. Search a 2D Matrix - Leetcode 240. Search a 2D Matrix II == \u9690\u5f0f\u4e8c\u5206\u6cd5\uff1a - Leetcode 69. Sqrt(x) - Leetcode 540. Single Element in a Sorted Array - Leetcode 644. Maximum Average Subarray II - Leetcode 528. Random Pick with Weight - Leetcode 1300. Sum of Mutated Array Closest to Target - Leetcode 1060. Missing Element in Sorted Array \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u4e8c\u5206\u67e5\u627e\u5e94\u7528(\u7b80\u5355) 374\u300135\u3001278\u3001367\u300169\u3001441 \u4e8c\u5206\u67e5\u627e\u5e94\u7528(\u4e2d\u7b49) 34\u3001540\u3001275\u3001436\u3001300\u3001354\u3001658\u3001162\u30014 \u4e8c\u5206\u67e5\u627e\u4e0e\u65cb\u8f6c\u6570\u7ec4 153\u3001154\u300133\u300181 \u4e8c\u5206\u67e5\u627e\u4e0e\u77e9\u9635 74\u3001240 \u4e8c\u5206\u7b54\u6848\u6cd5 378\u3001668\u3001410\u3001483","title":"Binary Search"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Binary%20Search/Binary%20Search/","text":"Binary Search (3) Introduction Binary search is an algorithm that finds a target number in a sorted array in \\(O(\\log n)\\) time. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def binarySearch ( arr , target ): left , right = 0 , len ( arr ) - 1 while left <= right : mid = ( left + right ) // 2 if target == arr [ mid ]: return mid elif target < arr [ mid ]: right = mid - 1 else : left = mid + 1 return - 1 arr = [ 1 , 2 , 3 , 4 , 5 ] for n in range ( 0 , 7 ): print ( f ' { n } : { binarySearch ( arr , n ) } ' ) C++ 1 2 3 int binarySearch () { } Java 1 Problems (0, 3, 0) LC704. Binary Search (Easy) LC704. Binary Search (Easy) Info LC704. Binary Search (Easy) Algorithm: Binary Search Time Complexity: \\(O(\\log n)\\) Space Complexity: \\(O(1)\\) Solution This is a standard binary search problem. Binary Search O(n) Python 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def search ( self , nums : List [ int ], target : int ) -> int : left , right = 0 , len ( nums ) - 1 while left <= right : mid = ( left + right ) // 2 if target == nums [ mid ]: return mid elif target < nums [ mid ]: right = mid - 1 else : left = mid + 1 return - 1 LC1011. Capacity To Ship Packages Within D Days (Medium) LC1011. Capacity To Ship Packages Within D Days (Medium) Info LC1011. Capacity To Ship Packages Within D Days (Medium) Algorithm: Binary Search Time Complexity: \\(O(n\\log(S))\\) , where \\(S\\) is the sum of all weights. Space Complexity: \\(O(1)\\) Solution Binary search for the \\(\\mbox{capacity} \\in [max(weights), sum(weights)]\\) . For each of these \\(O(\\log n)\\) capacity, it costs \\(O(n)\\) to check if the plan can be delivered. Total cost is thus \\(O(n \\log n)\\) . Binary Search \\(O(n\\log(S))\\) Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution : def canDeliver ( self , weights , capacity , days ) -> bool : i = 0 for d in range ( days ): load = 0 while load <= capacity and i < len ( weights ): load += weights [ i ] i += 1 if load > capacity : load -= weights [ i - 1 ] i -= 1 elif i >= len ( weights ): return True return False def shipWithinDays ( self , weights : List [ int ], days : int ) -> int : minCap , maxCap = max ( weights ), sum ( weights ) while minCap <= maxCap : capacity = ( minCap + maxCap ) // 2 if self . canDeliver ( weights , capacity , days ): maxCap = capacity - 1 else : minCap = capacity + 1 return minCap LC1642. Furthest Building You Can Reach (Medium) LC1642. Furthest Building You Can Reach (Medium) Info 1642. Furthest Building You Can Reach (Medium) Algorithm: Binary Search Time Complexity: \\(O(n\\log n)\\) Space Complexity: \\(O(1)\\) Solution Binary search to propose the furthest building you try to reach, which costs \\(O(\\log n)\\) . Within each proposal, it takes \\(O(n)\\) to check if you are indeed able to finish. Total cost is thus \\(O(n \\log n)\\) . Binary Search \\(O(n\\log n)\\) Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def canFinish ( self , heights , bricks , ladders ) -> bool : steps = sorted ([ heights [ i ] - heights [ i - 1 ] for i in range ( 1 , len ( heights )) if heights [ i ] - heights [ i - 1 ] > 0 ]) if not steps : return True if ladders == 0 : return bricks >= sum ( steps ) return bricks >= sum ( steps [: - ladders ]) def furthestBuilding ( self , heights : List [ int ], bricks : int , ladders : int ) -> int : left , right = 0 , len ( heights ) - 1 while left <= right : mid = ( left + right ) // 2 if self . canFinish ( heights [: mid + 1 ], bricks , ladders ): left = mid + 1 else : right = mid - 1 return max ( 0 , right ) LC34. Find First and Last Position of Element in Sorted Array (Medium) LC34. Find First and Last Position of Element in Sorted Array (Medium) Info LC34. Find First and Last Position of Element in Sorted Array (Medium) Algorithm: Binary Search Time Complexity: \\(O(\\log n)\\) Space Complexity: \\(O(1)\\) Solution Main Method O(n) Python 1","title":"Binary Search (3)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Binary%20Search/Binary%20Search/#binary-search-3","text":"","title":"Binary Search (3)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Binary%20Search/Binary%20Search/#introduction","text":"Binary search is an algorithm that finds a target number in a sorted array in \\(O(\\log n)\\) time. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def binarySearch ( arr , target ): left , right = 0 , len ( arr ) - 1 while left <= right : mid = ( left + right ) // 2 if target == arr [ mid ]: return mid elif target < arr [ mid ]: right = mid - 1 else : left = mid + 1 return - 1 arr = [ 1 , 2 , 3 , 4 , 5 ] for n in range ( 0 , 7 ): print ( f ' { n } : { binarySearch ( arr , n ) } ' ) C++ 1 2 3 int binarySearch () { } Java 1","title":"Introduction"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Binary%20Search/Binary%20Search/#problems-0-3-0","text":"","title":"Problems (0, 3, 0)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Binary%20Search/Binary%20Search/#lc704-binary-search-easy","text":"LC704. Binary Search (Easy) Info LC704. Binary Search (Easy) Algorithm: Binary Search Time Complexity: \\(O(\\log n)\\) Space Complexity: \\(O(1)\\) Solution This is a standard binary search problem. Binary Search O(n) Python 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def search ( self , nums : List [ int ], target : int ) -> int : left , right = 0 , len ( nums ) - 1 while left <= right : mid = ( left + right ) // 2 if target == nums [ mid ]: return mid elif target < nums [ mid ]: right = mid - 1 else : left = mid + 1 return - 1","title":"LC704. Binary Search (Easy)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Binary%20Search/Binary%20Search/#lc1011-capacity-to-ship-packages-within-d-days-medium","text":"LC1011. Capacity To Ship Packages Within D Days (Medium) Info LC1011. Capacity To Ship Packages Within D Days (Medium) Algorithm: Binary Search Time Complexity: \\(O(n\\log(S))\\) , where \\(S\\) is the sum of all weights. Space Complexity: \\(O(1)\\) Solution Binary search for the \\(\\mbox{capacity} \\in [max(weights), sum(weights)]\\) . For each of these \\(O(\\log n)\\) capacity, it costs \\(O(n)\\) to check if the plan can be delivered. Total cost is thus \\(O(n \\log n)\\) . Binary Search \\(O(n\\log(S))\\) Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution : def canDeliver ( self , weights , capacity , days ) -> bool : i = 0 for d in range ( days ): load = 0 while load <= capacity and i < len ( weights ): load += weights [ i ] i += 1 if load > capacity : load -= weights [ i - 1 ] i -= 1 elif i >= len ( weights ): return True return False def shipWithinDays ( self , weights : List [ int ], days : int ) -> int : minCap , maxCap = max ( weights ), sum ( weights ) while minCap <= maxCap : capacity = ( minCap + maxCap ) // 2 if self . canDeliver ( weights , capacity , days ): maxCap = capacity - 1 else : minCap = capacity + 1 return minCap","title":"LC1011. Capacity To Ship Packages Within D Days (Medium)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Binary%20Search/Binary%20Search/#lc1642-furthest-building-you-can-reach-medium","text":"LC1642. Furthest Building You Can Reach (Medium) Info 1642. Furthest Building You Can Reach (Medium) Algorithm: Binary Search Time Complexity: \\(O(n\\log n)\\) Space Complexity: \\(O(1)\\) Solution Binary search to propose the furthest building you try to reach, which costs \\(O(\\log n)\\) . Within each proposal, it takes \\(O(n)\\) to check if you are indeed able to finish. Total cost is thus \\(O(n \\log n)\\) . Binary Search \\(O(n\\log n)\\) Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def canFinish ( self , heights , bricks , ladders ) -> bool : steps = sorted ([ heights [ i ] - heights [ i - 1 ] for i in range ( 1 , len ( heights )) if heights [ i ] - heights [ i - 1 ] > 0 ]) if not steps : return True if ladders == 0 : return bricks >= sum ( steps ) return bricks >= sum ( steps [: - ladders ]) def furthestBuilding ( self , heights : List [ int ], bricks : int , ladders : int ) -> int : left , right = 0 , len ( heights ) - 1 while left <= right : mid = ( left + right ) // 2 if self . canFinish ( heights [: mid + 1 ], bricks , ladders ): left = mid + 1 else : right = mid - 1 return max ( 0 , right )","title":"LC1642. Furthest Building You Can Reach (Medium)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Binary%20Search/Binary%20Search/#lc34-find-first-and-last-position-of-element-in-sorted-array-medium","text":"LC34. Find First and Last Position of Element in Sorted Array (Medium) Info LC34. Find First and Last Position of Element in Sorted Array (Medium) Algorithm: Binary Search Time Complexity: \\(O(\\log n)\\) Space Complexity: \\(O(1)\\) Solution Main Method O(n) Python 1","title":"LC34. Find First and Last Position of Element in Sorted Array (Medium)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Bit%20Manipulation/","text":"= Bit \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u6570\u5b57\u7684\u4f4d\u64cd\u4f5c 7\u30019\u3001479\u3001564\u3001231\u3001342\u3001326\u3001504\u3001263\u3001190\u3001191\u3001476\u3001461\u3001477\u3001693\u3001393\u3001172\u3001458\u3001258\u3001319\u3001405\u3001171\u3001168\u3001670\u3001233\u3001357\u3001400 \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u5f02\u6216\u7684\u5e94\u7528 89\u3001136\u3001137\u3001260\u3001268 \u4e0e\u6216\u975e\u7684\u5e94\u7528 371\u3001318\u3001201","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/DFS/","text":"== \u57fa\u7840\u77e5\u8bc6\uff1a \u5e38\u89c1\u7684DFS\u7528\u6765\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\uff1f(1) \u56fe\u4e2d\uff08\u6709\u5411\u65e0\u5411\u7686\u53ef\uff09\u7684\u7b26\u5408\u67d0\u79cd\u7279\u5f81\uff08\u6bd4\u5982\u6700\u957f\uff09\u7684\u8def\u5f84\u4ee5\u53ca\u957f\u5ea6\uff082\uff09\u6392\u5217\u7ec4\u5408\uff083\uff09 \u904d\u5386\u4e00\u4e2a\u56fe\uff08\u6216\u8005\u6811\uff09\uff084\uff09\u627e\u51fa\u56fe\u6216\u8005\u6811\u4e2d\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u5168\u90e8\u65b9\u6848 DFS\u57fa\u672c\u6a21\u677f\uff08\u9700\u8981\u8bb0\u5f55\u8def\u5f84\uff0c\u4e0d\u9700\u8981\u8fd4\u56de\u503c and \u4e0d\u9700\u8981\u8bb0\u5f55\u8def\u5f84\uff0c\u4f46\u9700\u8981\u8bb0\u5f55\u67d0\u4e9b\u7279\u5f81\u7684\u8fd4\u56de\u503c\uff09 \u9664\u4e86\u904d\u5386\u4e4b\u5916\u591a\u6570\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6307\u6570\u7ea7\u522b\uff0c\u4e00\u822c\u662fO(\u65b9\u6848\u6570\u00d7\u627e\u5230\u6bcf\u4e2a\u65b9\u6848\u7684\u65f6\u95f4\u590d\u6742\u5ea6) \u9012\u5f52\u9898\u76ee\u90fd\u53ef\u4ee5\u7528\u975e\u9012\u5f52\u8fed\u4ee3\u7684\u65b9\u6cd5\u5199\uff0c\u4f46\u4e00\u822c\u5b9e\u73b0\u8d77\u6765\u975e\u5e38\u9ebb\u70e6 == \u57fa\u4e8e\u6811\u7684DFS\uff1a\u9700\u8981\u8bb0\u4f4f\u9012\u5f52\u5199\u524d\u5e8f\u4e2d\u5e8f\u540e\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\u7684\u6a21\u677f - LeetCode 543 Diameter of Binary Tree - LeetCode 226 Invert Binary Tree - LeetCode 124 Binary Tree Maximum Path Sum - LeetCode 236 Lowest Common Ancestor of a Binary Tree - LeetCode 101 Symmetric Tree - LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal - LeetCode 104 Maximum Depth of Binary Tree - LeetCode 951 Flip Equivalent Binary Trees - LeetCode 987 Vertical Order Traversal of a Binary Tree - LeetCode 1485 Clone Binary Tree With Random Pointer - LeetCode 572 Subtree of Another Tree - LeetCode 863 All Nodes Distance K in Binary Tree == \u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\uff1aBST\u7279\u5f81\uff1a\u4e2d\u5e8f\u904d\u5386\u4e3a\u5355\u8c03\u9012\u589e\u7684\u4e8c\u53c9\u6811\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u6839\u8282\u70b9\u7684\u503c\u6bd4\u5de6\u5b50\u6811\u4efb\u610f\u8282\u70b9\u503c\u90fd\u5927\uff0c\u6bd4\u53f3\u5b50\u6811\u4efb\u610f\u8282\u70b9\u503c\u90fd\u5c0f\uff0c\u589e\u5220\u67e5\u6539\u5747\u4e3aO\uff08h\uff09\u590d\u6742\u5ea6\uff0ch\u4e3a\u6570\u7684\u9ad8\u5ea6\uff1b\u6ce8\u610f\u4e0d\u662f\u6240\u6709\u7684BST\u9898\u76ee\u90fd\u9700\u8981\u9012\u5f52\uff0c\u6709\u7684\u9898\u76ee\u53ea\u9700\u8981while\u5faa\u73af\u5373\u53ef - LeetCode 230 Kth Smallest element in a BST - LeetCode 98 Validate Binary Search Tree - LeetCode 270 Cloest Binary Search Tree Value - LeetCode 235 Lowest Common Ancestor of a Binary Search Tree - LeetCode 669 Trim a Binary Search Tree - LeetCode 700 Search Range in Binary Search Tree - LeetCode 108 Convert Sorted Array to Binary Search Tree - LeetCode 333 Largest BST Subtree - LeetCode 510 Inorder Successor in BST II == \u57fa\u4e8e\u56fe\u7684DFS: \u548cBFS\u4e00\u6837\u4e00\u822c\u9700\u8981\u4e00\u4e2aset\u6765\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u907f\u514d\u91cd\u590d\u8bbf\u95ee\u9020\u6210\u6b7b\u5faa\u73af - LeetCode 341 Flatten Nested List Iterator - LeetCode 394 Decode String - LeetCode 51 N-Queens - LeetCode 291 Word Pattern II (I\u4e3a\u7b80\u5355\u7684Hashmap\u9898) - LeetCode 126 Word Ladder II \uff08I\u4e3aBFS\u9898\u76ee\uff09 - LeetCode 1110 Delete Nodes And Return Forest - LeetCode 93 Restore IP Addresses - LeetCode 22 Generate Parentheses - LeetCode 37 Sodoku Solver - LeetCode 301 Remove Invalid Parentheses - LeetCode 212 Word Search II \uff08I, II\uff09 - LeetCode 1087 Brace Expansion - LeetCode 399 Evaluate Division - LeetCode 1274 Number of Ships in a Rectangle - LeetCode 1376 Time Needed to Inform All Employees - LeetCode 694 Number of Distinct Islands - LeetCode 586 Score of Parentheses == \u57fa\u4e8e\u6392\u5217\u7ec4\u5408\u7684DFS: \u5176\u5b9e\u4e0e\u56fe\u7c7bDFS\u65b9\u6cd5\u4e00\u81f4\uff0c\u4f46\u662f\u6392\u5217\u7ec4\u5408\u7684\u7279\u5f81\u66f4\u660e\u663e - LeetCode 17 Letter Combinations of a Phone Number - LeetCode 39 Combination Sum \uff08I, II, III, IV\uff09 - LeetCode 90 Subsets II \uff08\u91cd\u70b9\u5728\u4e8e\u5982\u4f55\u53bb\u91cd\uff09 - LeetCode 47 Permutation II - LeetCode 77 Combinations - LeetCode 526 Beautiful Arrangement == \u8bb0\u5fc6\u5316\u641c\u7d22\uff08DFS + Memoization Search\uff09\uff1a\u7b97\u662f\u52a8\u6001\u89c4\u5212\u7684\u4e00\u79cd\uff0c\u9012\u5f52\u6bcf\u6b21\u8fd4\u56de\u65f6\u540c\u65f6\u8bb0\u5f55\u4e0b\u5df2\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u7279\u5f81\uff0c\u907f\u514d\u91cd\u590d\u8bbf\u95ee\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u6709\u6548\u7684\u628a\u6307\u6570\u7ea7\u522b\u7684DFS\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e3a\u591a\u9879\u5f0f\u7ea7\u522b - LeetCode 139 Word Break II - LeetCode 131 Palindrome Partitioning - LeetCode 72 Edit Distance - LeetCode 377 Combination Sum IV - LeetCode 1335 Minimum Difficulty of a Job Schedule","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Dynamic%20Programming/","text":"= Dynamic Programming \u9898\u53f7 \u9898\u76ee\u94fe\u63a5 \u8bb2\u89e3\u94fe\u63a5 \u8bf4\u660e \u4e00\u7ef4 70 Climbing Stairs \u89c6\u9891\u8bb2\u89e3 62 Unique Paths \u89c6\u9891\u8bb2\u89e3 63 Unique Paths II \u89c6\u9891\u8bb2\u89e3 120 Triangle \u89c6\u9891\u8bb2\u89e3 \u5f88\u5c11\u8003 279 Perfect Squares \u89c6\u9891\u8bb2\u89e3 139 Word Break \u89c6\u9891\u8bb2\u89e3 375 Guess Number Higher or Lower II \u89c6\u9891\u8bb2\u89e3 312 Burst Balloons \u89c6\u9891\u8bb2\u89e3 322 Coin Change \u89c6\u9891\u8bb2\u89e3 \u4e8c\u7ef4 256 Paint House \u89c6\u9891\u8bb2\u89e3 265 Paint House II \u89c6\u9891\u8bb2\u89e3 64 Minimum Path Sum \u89c6\u9891\u8bb2\u89e3 72 Edit Distance \u89c6\u9891\u8bb2\u89e3 97 Interleaving String \u89c6\u9891\u8bb2\u89e3 174 Dungeon Game \u89c6\u9891\u8bb2\u89e3 221 Maximal Square \u89c6\u9891\u8bb2\u89e3 85 Maximal Rectangle \u89c6\u9891\u8bb2\u89e3 363 Max Sum of Rectangle No Larger Than K \u89c6\u9891\u8bb2\u89e3 TreeSet \u5316\u7b80 198 House Robber \u89c6\u9891\u8bb2\u89e3 213 House Robber II \u89c6\u9891\u8bb2\u89e3 276 Paint Fence \u89c6\u9891\u8bb2\u89e3 91 Decode Ways \u89c6\u9891\u8bb2\u89e3 10 Regular Expression Matching \u89c6\u9891\u8bb2\u89e3 44 Wildcard Matching \u89c6\u9891\u8bb2\u89e3 \u57fa\u7840\u77e5\u8bc6\uff1a\u8fd9\u91cc\u6307\u7684\u662f\u7528for\u5faa\u73af\u65b9\u5f0f\u7684\u52a8\u6001\u89c4\u5212\uff0c\u975eMemoization Search\u65b9\u5f0f\u3002DP\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3DFS\u9700\u8981\u6307\u6570\u7ea7\u522b\u7684\u95ee\u9898\u3002\u5e38\u89c1\u7684\u9898\u76ee\u5305\u62ec\u627e\u6700\u5927\u6700\u5c0f\uff0c\u627e\u53ef\u884c\u6027\uff0c\u627e\u603b\u65b9\u6848\u6570\u7b49\uff0c\u4e00\u822c\u7ed3\u679c\u662f\u4e00\u4e2aInteger\u6216\u8005Boolean\u3002 \u5e38\u89c1\u9898\u76ee\uff1a - LeetCode 674 Longest Continuous Increasing Subsequence - LeetCode 62 Unique Paths II - LeetCode 70 Climbing Stairs - LeetCode 64 Minimum Path Sum - LeetCode 368 Largest Divisible Subset - LeetCode 300 Longest Increasing Subsequence - LeetCode 354 Russian Doll Envelopes - LeetCode 256 Paint House - LeetCode 121 Best Time to Buy and Sell Stock - LeetCode 55 Jump Game - LeetCode 45 Jump Game II - LeetCode 403 Frog Jump - LeetCode 132 Palindrome Partitioning II - LeetCode 312 Burst Balloons - LeetCode 1143 Longest Common Subsequence - LeetCode 115 Distinct Subsequences - LeetCode 72 Edit Distance - LeetCode 91 Decode Ways - LeetCode 639 Decode Ways II - LeetCode 712 Minimum ASCII Delete Sum for Two Strings - LeetCode 221 Maximal Square - LeetCode 198 House Robber - LeetCode 213 House Robber II - LeetCode 87 Scramble String - LeetCode 1062 Longest Repeating Substring - LeetCode 1140 Stone Game II - LeetCode 322 Coin Change - LeetCode 518 Coin Change II - LeetCode 97 Interleaving String \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u6570\u7ec4\u4e2d\u7684\u52a8\u6001\u89c4\u5212 509\u300170\u3001338\u300145\u300155\u3001198\u3001213\u3001650\u300191\u3001639\u3001552\u3001123\u3001188\u3001309\u300132\u3001264\u3001313\u3001403 \u5b50\u6570\u7ec4\u3001\u5b50\u5e8f\u5217\u4e2d\u7684\u52a8\u6001\u89c4\u5212 689\u3001413\u3001446\u3001368\u3001416\u3001279 \u80cc\u5305\u95ee\u9898 322\u3001518\u3001474\u3001494\u3001377 \u77e9\u9635\u4e2d\u7684\u52a8\u6001\u89c4\u5212 62\u300163\u300164\u3001120\u3001576\u3001688\u3001221\u3001629\u3001174\u300196\u3001329 \u52a8\u6001\u89c4\u5212\u4e0e\u5b57\u7b26\u4e32\u5339\u914d 583\u300172\u300197\u3001115\u3001516\u3001132\u3001131\u3001139\u3001140\u3001514\u300110\u300144 \u72b6\u6001\u538b\u7f29\u52a8\u6001\u89c4\u5212 464\u3001691\u3001698\u3001638\u3001473 \u533a\u95f4\u4e2d\u7684\u52a8\u6001\u89c4\u5212 486\u3001664\u3001375\u3001312\u3001546 \u6811\u5f62dp 337\u3001124 \u6570\u4f4ddp 233\u3001600","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Graph/","text":"= Graph \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u56fe\u7684\u5efa\u7acb\u4e0e\u5e94\u7528 565 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 17\u3001397 \u56de\u6eaf\u6cd5 526\u3001401\u300136\u300137\u300151\u300152\u300177\u300139\u3001216\u300140\u300146\u300147\u300131\u3001556\u300160\u3001491\u300178\u300190\u300179\u300193\u3001332 \u56de\u6eaf\u6cd5\u4e0e\u8868\u8fbe\u5f0f 241\u3001282\u3001679 \u56de\u6eaf\u6cd5\u4e0e\u62ec\u53f7 22\u3001301 \u56de\u6eaf\u6cd5\u4e0e\u8d2a\u5fc3 488 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 133\u3001200\u3001695\u3001463\u3001542\u3001130\u3001417\u3001529\u3001127\u3001126\u3001433\u3001675 \u5e76\u67e5\u96c6 547\u3001684\u3001685 \u62d3\u6251\u6392\u5e8f 399\u3001207\u3001210 \u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a 65\u3001468","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Greedy/Index/","text":"= Greedy \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u6570\u7ec4\u4e0e\u8d2a\u5fc3\u7b97\u6cd5 605\u3001121\u3001122\u3001561\u3001455\u3001575\u3001135\u3001409\u3001621\u3001179\u300156\u300157\u3001228\u3001452\u3001435\u3001646\u3001406\u300148\u3001169\u3001215\u300175\u3001324\u3001517\u3001649\u3001678\u3001420 \u5b50\u6570\u7ec4\u4e0e\u8d2a\u5fc3\u7b97\u6cd5 53\u3001134\u3001581\u3001152 \u5b50\u5e8f\u5217\u4e0e\u8d2a\u5fc3\u7b97\u6cd5 334\u3001376\u3001659 \u6570\u5b57\u4e0e\u8d2a\u5fc3 343 \u5355\u8c03\u6808\u6cd5 496\u3001503\u3001456\u3001316\u3001402\u3001321\u300184\u300185","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Hash/Index/","text":"= Hash Leetcode 1. Two Sum Leetcode 146. LRU Cache (Python\u4e2d\u53ef\u4ee5\u4f7f\u7528OrderedDict\u6765\u4ee3\u66ff) Leetcode 128. Longest Consecutive Sequence Leetcode 73. Set Matrix Zeroes Leetcode 380. Insert Delete GetRandom O(1) Leetcode 49. Group Anagrams Leetcode 350. Intersection of Two Arrays II Leetcode 299. Bulls and Cows Leetcode 348 Design Tic-Tac-Toe \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u54c8\u5e0c\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u53ca\u5220\u9664 217\u3001633\u3001349\u3001128\u3001202\u3001500\u3001290\u3001532\u3001205\u3001166\u3001466\u3001138 \u54c8\u5e0c\u8868\u4e0e\u7d22\u5f15 1\u3001167\u3001599\u3001219\u3001220 \u54c8\u5e0c\u8868\u4e0e\u7edf\u8ba1 594\u3001350\u3001554\u3001609\u3001454\u300118 \u54c8\u5e0c\u8868\u4e0e\u524d\u7f00\u548c 560\u3001523\u3001525","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Heap/","text":"= Heap Leetcode 973. K Closest Points Leetcode 347. Top k Largest Elements Leetcode 23. Merge K Sorted Lists Leetcode 264. Ugly Number II Leetcode 1086. High Five Leetcode 68. Merge Sorted Arrays Leetcode 692. Top K Frequent Words Leetcode 378. Kth Smallest Element in a Sorted Matrix Leetcode 295. Find Median from Data Stream Leetcode 767. Reorganize String Leetcode 1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit Leetcode 895. Maximum Frequency Stack","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Heap/Heap/","text":"Heap (1) Introduction Heap. Problems (0, 1, 0) LC659. Split Array into Consecutive Subsequences (Medium) LC659. Split Array into Consecutive Subsequences (Medium) Info LC659. Split Array into Consecutive Subsequences (Medium) Algorithm: Heap Time Complexity: Space Complexity: Solution Adhoc \\(O(n^2)\\) Python 1","title":"Heap (1)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Heap/Heap/#heap-1","text":"","title":"Heap (1)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Heap/Heap/#introduction","text":"Heap.","title":"Introduction"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Heap/Heap/#problems-0-1-0","text":"","title":"Problems (0, 1, 0)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Heap/Heap/#lc659-split-array-into-consecutive-subsequences-medium","text":"LC659. Split Array into Consecutive Subsequences (Medium) Info LC659. Split Array into Consecutive Subsequences (Medium) Algorithm: Heap Time Complexity: Space Complexity: Solution Adhoc \\(O(n^2)\\) Python 1","title":"LC659. Split Array into Consecutive Subsequences (Medium)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Linked%20List/","text":"= Linked List \u57fa\u7840\u77e5\u8bc6\uff1a\u94fe\u8868\u5982\u4f55\u5b9e\u73b0\uff0c\u5982\u4f55\u904d\u5386\u94fe\u8868\u3002\u94fe\u8868\u53ef\u4ee5\u4fdd\u8bc1\u5934\u90e8\u5c3e\u90e8\u63d2\u5165\u5220\u9664\u64cd\u4f5c\u90fd\u662fO\uff081\uff09\uff0c\u67e5\u627e\u4efb\u610f\u5143\u7d20\u4f4d\u7f6eO\uff08N\uff09 == \u57fa\u7840\u9898\u76ee\uff1a - Leetcode 206. Reverse Linked List - Leetcode 876. Middle of the Linked List \u6ce8\u610f\uff1a\u5feb\u6162\u6307\u9488\u548c\u94fe\u8868\u53cd\u8f6c\u51e0\u4e4e\u662f\u6240\u6709\u94fe\u8868\u7c7b\u95ee\u9898\u7684\u57fa\u7840\uff0c\u5c24\u5176\u662f\u53cd\u8f6c\u94fe\u8868\uff0c\u4ee3\u7801\u5f88\u77ed\uff0c\u5efa\u8bae\u76f4\u63a5\u80cc\u719f\u3002 == \u8fdb\u9636\u9898\u76ee: - Leetcode 160. Intersection of Two Linked Lists - Leetcode 141. Linked List Cycle (Linked List Cycle II) - Leetcode 92. Reverse Linked List II - Leetcode 328. Odd Even Linked List \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u94fe\u8868\u7684\u5220\u9664 203\u3001237\u300119 \u94fe\u8868\u7684\u904d\u5386 430 \u94fe\u8868\u7684\u65cb\u8f6c\u4e0e\u53cd\u8f6c 61\u300124\u3001206\u300192\u300125 \u94fe\u8868\u9ad8\u7cbe\u5ea6\u52a0\u6cd5 2\u3001445 \u94fe\u8868\u7684\u5408\u5e76 21\u300123","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Monotonic%20Stack/","text":"= Monotonic Stack \u57fa\u7840\u77e5\u8bc6\uff1a\u5355\u8c03\u6808\u4e00\u822c\u7528\u4e8e\u89e3\u51b3\u6570\u7ec4\u4e2d\u627e\u51fa\u6bcf\u4e2a\u6570\u5b57\u7684\u7b2c\u4e00\u4e2a\u5927\u4e8e\uff0f\u5c0f\u4e8e\u8be5\u6570\u5b57\u7684\u4f4d\u7f6e\u6216\u8005\u6570\u5b57\uff1b\u5355\u8c03\u961f\u5217\u53ea\u89c1\u8fc7\u4e00\u9053\u9898\u9700\u8981\u4f7f\u7528\uff1b\u4e0d\u8bba\u5355\u8c03\u6808\u8fd8\u662f\u5355\u8c03\u961f\u5217\uff0c\u5355\u8c03\u7684\u610f\u601d\u662f\u4fdd\u7559\u5728\u6808\u6216\u8005\u961f\u5217\u4e2d\u7684\u6570\u5b57\u662f\u5355\u8c03\u9012\u589e\u6216\u8005\u5355\u8c03\u9012\u51cf\u7684 \u5e38\u89c1\u9898\u76ee\uff1a - Leetcode 85 Maximum Rectangle - Leetcode 84 Largest Rectangle in Histogram - Leetcode 739 Daily Temperatures - Leetcode 901 Online Stock Span - Leetcode 503 Next Greater Element II - Leetcode 239 Sliding Window Maximum \uff08\u552f\u4e00\u7684\u5355\u8c03\u961f\u5217\u9898\uff09","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Monotonic%20Stack/Monotonic%20Stack/","text":"Monotonic Stack (0) Introduction Monotonic stack is a data structure that is able to find the nearest event (not the furthest ) for each of the \\(n\\) elements in an array of size \\(n\\) in \\(O(n)\\) time and \\(O(1)\\) space. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # # Monotonic stack to find the next bigger number. # def monotonicStack ( arr ): firstHigherValue = [ '#' ] * len ( arr ) stack = [] for i , n in enumerate ( arr ): while stack and n > stack [ - 1 ][ 1 ]: idx , value = stack . pop () # do something with (idx, value) firstHigherValue [ idx ] = n stack . append (( i , n )) return firstHigherValue arr = [ 1 , 3 , 4 , 6 , 2 , 1 , 4 , 5 ] print ( monotonicStack ( arr )) C++ 1 2 3 int binarySearch () { } Java 1 Problems (0, 0, 0)","title":"Monotonic Stack (0)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Monotonic%20Stack/Monotonic%20Stack/#monotonic-stack-0","text":"","title":"Monotonic Stack (0)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Monotonic%20Stack/Monotonic%20Stack/#introduction","text":"Monotonic stack is a data structure that is able to find the nearest event (not the furthest ) for each of the \\(n\\) elements in an array of size \\(n\\) in \\(O(n)\\) time and \\(O(1)\\) space. Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # # Monotonic stack to find the next bigger number. # def monotonicStack ( arr ): firstHigherValue = [ '#' ] * len ( arr ) stack = [] for i , n in enumerate ( arr ): while stack and n > stack [ - 1 ][ 1 ]: idx , value = stack . pop () # do something with (idx, value) firstHigherValue [ idx ] = n stack . append (( i , n )) return firstHigherValue arr = [ 1 , 3 , 4 , 6 , 2 , 1 , 4 , 5 ] print ( monotonicStack ( arr )) C++ 1 2 3 int binarySearch () { } Java 1","title":"Introduction"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Monotonic%20Stack/Monotonic%20Stack/#problems-0-0-0","text":"","title":"Problems (0, 0, 0)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Presum/Index/","text":"= PreSum \u57fa\u7840\u77e5\u8bc6\uff1a\u524d\u7f00\u548c\u672c\u8d28\u4e0a\u662f\u5728\u4e00\u4e2alist\u5f53\u4e2d\uff0c\u7528O\uff08N\uff09\u7684\u65f6\u95f4\u63d0\u524d\u7b97\u597d\u4ece\u7b2c0\u4e2a\u6570\u5b57\u5230\u7b2ci\u4e2a\u6570\u5b57\u4e4b\u548c\uff0c\u5728\u540e\u7eed\u4f7f\u7528\u4e2d\u53ef\u4ee5\u5728O\uff081\uff09\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u7b2ci\u5230\u7b2cj\u4e2a\u6570\u5b57\u4e4b\u548c\uff0c\u4e00\u822c\u5f88\u5c11\u5355\u72ec\u4f5c\u4e3a\u4e00\u9053\u9898\u51fa\u73b0\uff0c\u800c\u662f\u5f88\u591a\u9898\u76ee\u4e2d\u7684\u7528\u5230\u7684\u4e00\u4e2a\u5c0f\u6280\u5de7 \u5e38\u89c1\u9898\u76ee\uff1a - Leetcode 53 Maximum Subarray - Leetcode 1423 Maximum Points You Can Obtain from Cards - Leetcode 1031 Maximum Sum of Two Non-Overlapping Subarrays - Leetcode 523 Continuous Subarray Sum","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Queue/","text":"= Queue Leetcode 225. Implement Stack using Queues Leetcode 346. Moving Average from Data Stream Leetcode 281. Zigzag Iterator Leetcode 1429. First Unique Number Leetcode 54. Spiral Matrix Leetcode 362. Design Hit Counter","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Sort/","text":"= Sort \u57fa\u7840\u77e5\u8bc6\uff1a\u5feb\u901f\u6392\u5e8f\uff08Quick Sort\uff09\uff0c \u5f52\u5e76\u6392\u5e8f\uff08Merge Sort\uff09\u7684\u539f\u7406\u4e0e\u4ee3\u7801\u5b9e\u73b0\u3002\u9700\u8981\u80fd\u8bb2\u660e\u767d\u4ee3\u7801\u4e2d\u6bcf\u4e00\u884c\u7684\u76ee\u7684\u3002\u5feb\u901f\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6\u5e73\u5747\u72b6\u6001\u4e0bO\uff08NlogN\uff09\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O\uff081\uff09\uff0c\u5f52\u5e76\u6392\u5e8f\u6700\u574f\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6O\uff08NlogN\uff09\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O\uff08N\uff09 == \u5165\u95e8\u9898\u76ee\uff1a - Leetcode 148. Sort List - Leetcode 56. Merge Intervals == \u8fdb\u9636\u9898\u76ee\uff1a - Leetcode 179. Largest Number - Leetcode 75. Sort Colors - Leetcode 215. Kth Largest Element - Leetcode 4. Median of Two Sorted Arrays \u6ce8\u610f\uff1a\u540e\u4e24\u9898\u662f\u4e0e\u5feb\u901f\u6392\u5e8f\u975e\u5e38\u76f8\u4f3c\u7684\u5feb\u901f\u9009\u62e9\uff08Quick Select\uff09\u7b97\u6cd5\uff0c\u9762\u8bd5\u4e2d\u5f88\u5e38\u8003","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Stack/","text":"= Stack Leetcode 232. Implement Queue using Stacks Leetcode 150. Evaluate Reverse Polish Notation Leetcode 224. Basic Calculator II (I, II, III, IV) Leetcode 20. Valid Parentheses Leetcode 1472. Design Browser History Leetcode 1209. Remove All Adjacent Duplicates in String II Leetcode 1249. Minimum Remove to Make Valid Parentheses Leetcode 735. Asteroid Collision \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u7528\u6808\u8bbf\u95ee\u6700\u540e\u82e5\u5e72\u5143\u7d20 682\u300171\u3001388 \u6808\u4e0e\u8ba1\u7b97\u5668 150\u3001227\u3001224 \u6808\u4e0e\u62ec\u53f7\u5339\u914d 20\u3001636\u3001591\u300132 \u9012\u5f52 385\u3001341\u3001394","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/String/","text":"\u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u5b57\u7b26 520 \u56de\u6587\u4e32\u7684\u5b9a\u4e49 125 \u516c\u5171\u524d\u7f00 14 \u5355\u8bcd 434\u300158 \u5b57\u7b26\u4e32\u7684\u53cd\u8f6c 344\u3001541\u3001557\u3001151 \u5b57\u7b26\u7684\u7edf\u8ba1 387\u3001389\u3001383\u3001242\u300149\u3001451\u3001423\u3001657\u3001551\u3001696\u3001467\u3001535 \u6570\u5b57\u4e0e\u5b57\u7b26\u4e32\u95f4\u8f6c\u6362 299\u3001412\u3001506\u3001539\u3001553\u3001537\u3001592\u3001640\u300138\u3001443\u30018\u300113\u300112\u3001273\u3001165\u3001481 \u5b50\u5e8f\u5217 392\u3001524\u3001521\u3001522 \u9ad8\u7cbe\u5ea6\u8fd0\u7b97 66\u300167\u3001415\u300143\u3001306 \u5b57\u7b26\u4e32\u53d8\u6362 482\u30016\u300168 \u5b57\u7b26\u4e32\u5339\u914d 28\u3001686\u3001459\u3001214 \u4e2d\u5fc3\u62d3\u5c55\u6cd5 5\u3001647","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Sweep%20Line/","text":"= Sweep Line \u57fa\u7840\u77e5\u8bc6\uff1a\u4e00\u4e2a\u5f88\u5de7\u5999\u7684\u89e3\u51b3\u65f6\u95f4\u5b89\u6392\u51b2\u7a81\u7684\u7b97\u6cd5\uff0c\u672c\u8eab\u6bd4\u8f83\u5bb9\u6613\u4e9b\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3 \u5e38\u89c1\u9898\u76ee\uff1a - Leetcode 253 Meeting Room II\uff08Meeting Room I\u4e5f\u53ef\u4ee5\u4f7f\u7528\uff09 - Leetcode 218 The Skyline Problem - Leetcode 759 Employee Free Time","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Tree/","text":"= Tree \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u6811\u4e0e\u9012\u5f52 100\u3001222\u3001101\u3001226\u3001437\u3001563\u3001617\u3001508\u3001572\u3001543\u3001654\u3001687\u300187 \u6811\u7684\u5c42\u6b21\u904d\u5386 102\u3001429\u3001690\u3001559\u3001662\u3001671\u3001513\u3001515\u3001637\u3001103\u3001107\u3001257\u3001623\u3001653\u3001104\u3001111\u3001112\u3001113\u3001129\u3001404\u3001199\u3001655\u3001116\u3001117 \u6811\u7684\u524d\u5e8f\u904d\u5386 144\u3001589 \u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316 606\u3001331\u3001652\u3001297\u3001449 \u6811\u7684\u540e\u5e8f\u904d\u5386 145\u3001590 \u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u4e8c\u53c9\u641c\u7d22\u6811 94\u3001700\u3001530\u3001538\u3001230\u300198\u3001173\u3001669\u3001450\u3001110\u300195\u3001108\u3001109 \u91cd\u6784\u4e8c\u53c9\u6811 105\u3001106 \u4e8c\u53c9\u6811\u7684\u5c55\u5f00 114 \u6700\u8fd1\u516c\u5171\u7956\u5148 235\u3001236 Morris\u4e2d\u5e8f\u904d\u5386 501\u300199 \u56db\u53c9\u6811 558\u3001427","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Tree/Tree/","text":"Tree (2) Introduction Problems (0, 2, 0) LC654. Maximum Binary Tree (Medium) LC654. Maximum Binary Tree (Medium) Info LC654. Maximum Binary Tree (Medium) Algorithm: DFS (Recursion) Time Complexity: \\(O(n)\\) Space Complexity: \\(O(1)\\) Solution This is a standard DFS (Recursion) problem. DFS O(n) Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def constructMaximumBinaryTree ( self , nums : List [ int ]) -> TreeNode : if not len ( nums ): return None maxIdx , maxN = 0 , nums [ 0 ] for i , n in enumerate ( nums ): if n > maxN : maxIdx = i maxN = n left = self . constructMaximumBinaryTree ( nums [: maxIdx ]) right = self . constructMaximumBinaryTree ( nums [ maxIdx + 1 :]) return TreeNode ( maxN , left , right ) LC1519. Number of Nodes in the Sub-Tree With the Same Label (Medium) LC1519. Number of Nodes in the Sub-Tree With the Same Label (Medium) Info LC1519. Number of Nodes in the Sub-Tree With the Same Label (Medium) Algorithm: Time Complexity: Space Complexity: Solution DFS O(n) Python 1","title":"Tree (2)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Tree/Tree/#tree-2","text":"","title":"Tree (2)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Tree/Tree/#introduction","text":"","title":"Introduction"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Tree/Tree/#problems-0-2-0","text":"","title":"Problems (0, 2, 0)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Tree/Tree/#lc654-maximum-binary-tree-medium","text":"LC654. Maximum Binary Tree (Medium) Info LC654. Maximum Binary Tree (Medium) Algorithm: DFS (Recursion) Time Complexity: \\(O(n)\\) Space Complexity: \\(O(1)\\) Solution This is a standard DFS (Recursion) problem. DFS O(n) Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def constructMaximumBinaryTree ( self , nums : List [ int ]) -> TreeNode : if not len ( nums ): return None maxIdx , maxN = 0 , nums [ 0 ] for i , n in enumerate ( nums ): if n > maxN : maxIdx = i maxN = n left = self . constructMaximumBinaryTree ( nums [: maxIdx ]) right = self . constructMaximumBinaryTree ( nums [ maxIdx + 1 :]) return TreeNode ( maxN , left , right )","title":"LC654. Maximum Binary Tree (Medium)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Tree/Tree/#lc1519-number-of-nodes-in-the-sub-tree-with-the-same-label-medium","text":"LC1519. Number of Nodes in the Sub-Tree With the Same Label (Medium) Info LC1519. Number of Nodes in the Sub-Tree With the Same Label (Medium) Algorithm: Time Complexity: Space Complexity: Solution DFS O(n) Python 1","title":"LC1519. Number of Nodes in the Sub-Tree With the Same Label (Medium)"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Tree%20Map/","text":"= Tree Map \u57fa\u7840\u77e5\u8bc6\uff1a\u57fa\u4e8e\u7ea2\u9ed1\u6811\uff08\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff09\u7684\u4e00\u79cd\u6811\u72b6 hashmap\uff0c\u589e\u5220\u67e5\u6539\u3001\u627e\u6c42\u5927\u6700\u5c0f\u5747\u4e3alogN\u590d\u6742\u5ea6\uff0cPython\u5f53\u4e2d\u53ef\u4ee5\u4f7f\u7528SortedDict\u66ff\u4ee3 \u5e38\u89c1\u9898\u76ee\uff1a Leetcode 729 My Calendar I Leetcode 981 Time Based Key-Value Store Leetcode 846 Hand of Straights Leetcode 826 Most Profit Assigning Work","title":"Index"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Trie/","text":"Home A Stroll Through the Brambles of Algorithm = Trie \u57fa\u7840\u77e5\u8bc6\uff1a\uff08https://zh.wikipedia.org/wiki/Trie\uff09\uff1b\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u4ee5\u901a\u8fc7\u7528\u4e00\u4e2aset\u6765\u8bb0\u5f55\u6240\u6709\u5355\u8bcd\u7684prefix\u6765\u66ff\u4ee3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u53d8\uff0c\u4f46\u7a7a\u95f4\u590d\u6742\u5ea6\u7565\u9ad8 \u5e38\u89c1\u9898\u76ee\uff1a - Leetcode 208 Implement Trie (Prefix Tree) - Leetcode 211 Design Add and Search Words Data Structure - Leetcode 1268 Search Suggestions System - Leetcode 79 Word Search [https://techiedelight.quora.com/500-Data-Structures-and-Algorithms-practice-problems-and-their-solutions 500 Data Structures and Algorithms practice problems and their solutions] \u9ec4\u7eff\u84dd [https://en.wikipedia.org/wiki/List_of_data_structures list of DS] [https://www.youtube.com/channel/UCcdCkJKXlRoXVD03eo-q8mQ Coding Interview Problems] [https://www.topcoder.com/] [http://www.geeksforgeeks.org/] [https://www.interviewbit.com/] [http://ravindrababuravula.com/] [http://freevideolectures.com/] Algorithm Tricks: Reservoir Sampling [http://visualgo.net] [https://www.cs.usfca.edu/~galles/visualization/Algorithms.html] Algorithms -- Sorting: bubble sort, heap sort, merge sort","title":"Home"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Trie/#home","text":"A Stroll Through the Brambles of Algorithm = Trie \u57fa\u7840\u77e5\u8bc6\uff1a\uff08https://zh.wikipedia.org/wiki/Trie\uff09\uff1b\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u4ee5\u901a\u8fc7\u7528\u4e00\u4e2aset\u6765\u8bb0\u5f55\u6240\u6709\u5355\u8bcd\u7684prefix\u6765\u66ff\u4ee3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u53d8\uff0c\u4f46\u7a7a\u95f4\u590d\u6742\u5ea6\u7565\u9ad8 \u5e38\u89c1\u9898\u76ee\uff1a - Leetcode 208 Implement Trie (Prefix Tree) - Leetcode 211 Design Add and Search Words Data Structure - Leetcode 1268 Search Suggestions System - Leetcode 79 Word Search [https://techiedelight.quora.com/500-Data-Structures-and-Algorithms-practice-problems-and-their-solutions 500 Data Structures and Algorithms practice problems and their solutions] \u9ec4\u7eff\u84dd [https://en.wikipedia.org/wiki/List_of_data_structures list of DS] [https://www.youtube.com/channel/UCcdCkJKXlRoXVD03eo-q8mQ Coding Interview Problems] [https://www.topcoder.com/] [http://www.geeksforgeeks.org/] [https://www.interviewbit.com/] [http://ravindrababuravula.com/] [http://freevideolectures.com/] Algorithm Tricks: Reservoir Sampling [http://visualgo.net] [https://www.cs.usfca.edu/~galles/visualization/Algorithms.html] Algorithms -- Sorting: bubble sort, heap sort, merge sort","title":"Home"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Two%20Pointers/","text":"Home A Stroll Through the Brambles of Algorithm [https://techiedelight.quora.com/500-Data-Structures-and-Algorithms-practice-problems-and-their-solutions 500 Data Structures and Algorithms practice problems and their solutions] \u9ec4\u7eff\u84dd [https://en.wikipedia.org/wiki/List_of_data_structures list of DS] [https://www.youtube.com/channel/UCcdCkJKXlRoXVD03eo-q8mQ Coding Interview Problems] [https://www.topcoder.com/] [http://www.geeksforgeeks.org/] [https://www.interviewbit.com/] [http://ravindrababuravula.com/] [http://freevideolectures.com/] Algorithm Tricks: Reservoir Sampling [http://visualgo.net] [https://www.cs.usfca.edu/~galles/visualization/Algorithms.html] Algorithms -- Sorting: bubble sort, heap sort, merge sort = Two Pointers \u57fa\u7840\u77e5\u8bc6\uff1a\u5e38\u89c1\u53cc\u6307\u9488\u7b97\u6cd5\u5206\u4e3a\u4e09\u7c7b\uff0c\u540c\u5411\uff08\u5373\u4e24\u4e2a\u6307\u9488\u90fd\u76f8\u540c\u4e00\u4e2a\u65b9\u5411\u79fb\u52a8\uff09\uff0c\u80cc\u5411\uff08\u4e24\u4e2a\u6307\u9488\u4ece\u76f8\u540c\u6216\u8005\u76f8\u90bb\u7684\u4f4d\u7f6e\u51fa\u53d1\uff0c\u80cc\u5411\u79fb\u52a8\u76f4\u5230\u5176\u4e2d\u4e00\u6839\u6307\u9488\u5230\u8fbe\u8fb9\u754c\u4e3a\u6b62\uff09\uff0c\u76f8\u5411\uff08\u4e24\u4e2a\u6307\u9488\u4ece\u4e24\u8fb9\u51fa\u53d1\u4e00\u8d77\u5411\u4e2d\u95f4\u79fb\u52a8\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u76f8\u9047\uff09 == \u80cc\u5411\u53cc\u6307\u9488\uff1a(\u57fa\u672c\u4e0a\u5168\u662f\u56de\u6587\u4e32\u7684\u9898) - Leetcode 409. Longest Palindrome - Leetcode 125. Valid Palindrome - Leetcode 5. Longest Palindromic Substring == \u76f8\u5411\u53cc\u6307\u9488\uff1a(\u4ee5two sum\u4e3a\u57fa\u7840\u7684\u4e00\u7cfb\u5217\u9898) - Leetcode 1. Two Sum (\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u5148\u6392\u5e8f\u7684\u53cc\u6307\u9488\u7b97\u6cd5\uff0c\u4e0d\u540c\u4e8ehashmap\u505a\u6cd5) - Leetcode 167. Two Sum II - Input array is sorted - Leetcode 15. 3Sum - Leetcode 16. 3Sum Closest - Leetcode 18. 4Sum - Leetcode 454. 4Sum II - Leetcode 277. Find the Celebrity == \u540c\u5411\u53cc\u6307\u9488\uff1a\uff08\u4e2a\u4eba\u89c9\u5f97\u6700\u96be\u7684\u4e00\u7c7b\u9898\uff09 - Leetcode 283. Move Zeroes - Leetcode 26. Remove Duplicate Numbers in Array - Leetcode 395. Longest Substring with At Least K Repeating Characters - Leetcode 340. Longest Substring with At Most K Distinct Characters - Leetcode 76. Minimum Window Substring - Leetcode 3. Longest Substring Without Repeating Characters \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u5934\u5c3e\u6307\u9488 345\u3001680\u3001167\u300115\u300116\u300118\u300111\u300142 \u540c\u5411\u53cc\u6307\u9488\u3001\u6ed1\u52a8\u7a97\u53e3 27\u300126\u300180\u300183\u300182\u3001611\u3001187\u3001643\u3001674\u3001209\u30013\u3001438\u3001567\u3001424\u300176\u300130 \u5206\u6bb5\u53cc\u6307\u9488 86\u3001328\u3001160\u300188\u3001475 \u5feb\u6162\u6307\u9488 141\u3001142\u3001143\u3001234\u3001457\u3001287","title":"Home"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Two%20Pointers/#home","text":"A Stroll Through the Brambles of Algorithm [https://techiedelight.quora.com/500-Data-Structures-and-Algorithms-practice-problems-and-their-solutions 500 Data Structures and Algorithms practice problems and their solutions] \u9ec4\u7eff\u84dd [https://en.wikipedia.org/wiki/List_of_data_structures list of DS] [https://www.youtube.com/channel/UCcdCkJKXlRoXVD03eo-q8mQ Coding Interview Problems] [https://www.topcoder.com/] [http://www.geeksforgeeks.org/] [https://www.interviewbit.com/] [http://ravindrababuravula.com/] [http://freevideolectures.com/] Algorithm Tricks: Reservoir Sampling [http://visualgo.net] [https://www.cs.usfca.edu/~galles/visualization/Algorithms.html] Algorithms -- Sorting: bubble sort, heap sort, merge sort = Two Pointers \u57fa\u7840\u77e5\u8bc6\uff1a\u5e38\u89c1\u53cc\u6307\u9488\u7b97\u6cd5\u5206\u4e3a\u4e09\u7c7b\uff0c\u540c\u5411\uff08\u5373\u4e24\u4e2a\u6307\u9488\u90fd\u76f8\u540c\u4e00\u4e2a\u65b9\u5411\u79fb\u52a8\uff09\uff0c\u80cc\u5411\uff08\u4e24\u4e2a\u6307\u9488\u4ece\u76f8\u540c\u6216\u8005\u76f8\u90bb\u7684\u4f4d\u7f6e\u51fa\u53d1\uff0c\u80cc\u5411\u79fb\u52a8\u76f4\u5230\u5176\u4e2d\u4e00\u6839\u6307\u9488\u5230\u8fbe\u8fb9\u754c\u4e3a\u6b62\uff09\uff0c\u76f8\u5411\uff08\u4e24\u4e2a\u6307\u9488\u4ece\u4e24\u8fb9\u51fa\u53d1\u4e00\u8d77\u5411\u4e2d\u95f4\u79fb\u52a8\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u76f8\u9047\uff09 == \u80cc\u5411\u53cc\u6307\u9488\uff1a(\u57fa\u672c\u4e0a\u5168\u662f\u56de\u6587\u4e32\u7684\u9898) - Leetcode 409. Longest Palindrome - Leetcode 125. Valid Palindrome - Leetcode 5. Longest Palindromic Substring == \u76f8\u5411\u53cc\u6307\u9488\uff1a(\u4ee5two sum\u4e3a\u57fa\u7840\u7684\u4e00\u7cfb\u5217\u9898) - Leetcode 1. Two Sum (\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u5148\u6392\u5e8f\u7684\u53cc\u6307\u9488\u7b97\u6cd5\uff0c\u4e0d\u540c\u4e8ehashmap\u505a\u6cd5) - Leetcode 167. Two Sum II - Input array is sorted - Leetcode 15. 3Sum - Leetcode 16. 3Sum Closest - Leetcode 18. 4Sum - Leetcode 454. 4Sum II - Leetcode 277. Find the Celebrity == \u540c\u5411\u53cc\u6307\u9488\uff1a\uff08\u4e2a\u4eba\u89c9\u5f97\u6700\u96be\u7684\u4e00\u7c7b\u9898\uff09 - Leetcode 283. Move Zeroes - Leetcode 26. Remove Duplicate Numbers in Array - Leetcode 395. Longest Substring with At Least K Repeating Characters - Leetcode 340. Longest Substring with At Most K Distinct Characters - Leetcode 76. Minimum Window Substring - Leetcode 3. Longest Substring Without Repeating Characters \u9898\u76ee\u5206\u7c7b \u9898\u76ee\u7f16\u53f7 \u5934\u5c3e\u6307\u9488 345\u3001680\u3001167\u300115\u300116\u300118\u300111\u300142 \u540c\u5411\u53cc\u6307\u9488\u3001\u6ed1\u52a8\u7a97\u53e3 27\u300126\u300180\u300183\u300182\u3001611\u3001187\u3001643\u3001674\u3001209\u30013\u3001438\u3001567\u3001424\u300176\u300130 \u5206\u6bb5\u53cc\u6307\u9488 86\u3001328\u3001160\u300188\u3001475 \u5feb\u6162\u6307\u9488 141\u3001142\u3001143\u3001234\u3001457\u3001287","title":"Home"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Union%20Find/","text":"Home A Stroll Through the Brambles of Algorithm = Union Find \u57fa\u7840\u77e5\u8bc6\uff1a\u5982\u679c\u6570\u636e\u4e0d\u662f\u5b9e\u65f6\u53d8\u5316\uff0c\u672c\u7c7b\u95ee\u9898\u53ef\u4ee5\u7528BFS\u6216\u8005DFS\u7684\u65b9\u5f0f\u904d\u5386\uff0c\u5982\u679c\u6570\u636e\u5b9e\u65f6\u53d8\u5316\uff08data stream\uff09\u5219\u5e76\u67e5\u96c6\u6bcf\u6b21\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u89c6\u4e3aO\uff081\uff09\uff1b\u9700\u8981\u7262\u8bb0\u5408\u5e76\u4e0e\u67e5\u627e\u4e24\u4e2a\u64cd\u4f5c\u7684\u6a21\u677f \u5e38\u89c1\u9898\u76ee\uff1a - Leetcode 721 Accounts Merge - Leetcode 547 Number of Provinces - Leetcode 737 Sentence Similarity II - Leetcode 434 Number of Islands II","title":"Home"},{"location":"1.%20Quant%20Developer/Data%20Structures%20%26%20Algorithms/Union%20Find/#home","text":"A Stroll Through the Brambles of Algorithm = Union Find \u57fa\u7840\u77e5\u8bc6\uff1a\u5982\u679c\u6570\u636e\u4e0d\u662f\u5b9e\u65f6\u53d8\u5316\uff0c\u672c\u7c7b\u95ee\u9898\u53ef\u4ee5\u7528BFS\u6216\u8005DFS\u7684\u65b9\u5f0f\u904d\u5386\uff0c\u5982\u679c\u6570\u636e\u5b9e\u65f6\u53d8\u5316\uff08data stream\uff09\u5219\u5e76\u67e5\u96c6\u6bcf\u6b21\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u89c6\u4e3aO\uff081\uff09\uff1b\u9700\u8981\u7262\u8bb0\u5408\u5e76\u4e0e\u67e5\u627e\u4e24\u4e2a\u64cd\u4f5c\u7684\u6a21\u677f \u5e38\u89c1\u9898\u76ee\uff1a - Leetcode 721 Accounts Merge - Leetcode 547 Number of Provinces - Leetcode 737 Sentence Similarity II - Leetcode 434 Number of Islands II","title":"Home"},{"location":"1.%20Quant%20Developer/Network/","text":"Network","title":"Network"},{"location":"1.%20Quant%20Developer/Network/#network","text":"","title":"Network"},{"location":"1.%20Quant%20Developer/OS/","text":"Operating Systems","title":"Operating Systems"},{"location":"1.%20Quant%20Developer/OS/#operating-systems","text":"","title":"Operating Systems"},{"location":"2.%20Quant%20Researcher/1.%20Regression/Regression/","text":"Regression Generalized Linear Regression Consider a generalized linear regression problem based on a sample of \\(n\\) observations \\((x_1, t_1) \\dots, (x_n, t_n)\\) . Suppose the design matrix \\(\\X\\) is of the form \\[ \\underbrace{ \\begin{bmatrix} Y_1\\\\ \\dots\\\\ Y_n \\end{bmatrix} }_{\\y} = \\underbrace{ \\begin{bmatrix} 1 & f_1(X_1) & \\dots & f_p(X_1) \\\\ &&\\dots\\\\ 1 & f_1(X_2) & \\dots & f_p(X_2) \\end{bmatrix} }_{\\X} \\underbrace{ \\begin{bmatrix} \\beta_0\\\\ \\dots\\\\ \\beta_p \\end{bmatrix} }_{\\bbeta} + \\underbrace{ \\begin{bmatrix} \\epsilon_1\\\\ \\dots\\\\ \\epsilon_n \\end{bmatrix} }_{\\bepsilon} \\] that is, \\[\\begin{align} \\y = \\X\\bbeta + \\bepsilon \\end{align}\\] where \\(\\X \\in \\RRR^{n \\times p}\\) is the design matrix, \\(\\bbeta \\in \\RRR^p\\) is the coefficient vector, \\(\\y \\in \\RRR^n\\) is the dependent random variable vector, and \\(\\bepsilon \\in \\RRR^n\\) is the normally distributed random error with mean \\(\\0\\) and covariance \\(\\sigma\\I_n\\) . Note Note that, \\(Y_i\\) represents unrealized random variables while \\(t_i\\) represents its realized observations . On the contrary, \\(X_i\\) is just a convenient way to put together the sample levels \\(x_i\\) . \\(f(\\cdot)\\) can be any reasonable function, and the model is still called a linear model, because \\(\\y\\) is a linear function of its coefficients \\(\\bbeta\\) , as \\(x_1, \\dots, x_n\\) are all constants. An example would be: \\[ \\underbrace{ \\begin{bmatrix} 1.132\\\\ \\dots\\\\ 0.128 \\end{bmatrix} }_{\\y} = \\underbrace{ \\begin{bmatrix} 1 & e^{3.134} & \\dots & 3.134^2 \\\\ &&\\dots\\\\ 1 & e^{129.334} & \\dots & 129.334^2 \\end{bmatrix} }_{\\X} \\underbrace{ \\begin{bmatrix} \\beta_0\\\\ \\dots\\\\ \\beta_p \\end{bmatrix} }_{\\bbeta} \\] It is called general linear regression model , because it is a general version of its simplest form \\(y = \\beta_0 + \\beta_1 x\\) , which is called the simple linear regression model , where the feature function is the identity function \\(f(x) \\equiv x\\) . Note the difference between general linear regression model and generalized linear regression model , where the latter refers to a family of linear models that include Poisson Regression, Logistic Regression, and etc., where the random error is no longer normally distributed. The Maximum Likelihood Estimator If we use Mean-Squared-Error (MSE) as the goodness-of-fit: \\[ f(\\bbeta) = \\frac12||\\X\\bbeta - \\y||_2^2 = \\frac12(\\X\\bbeta - \\y)^T(\\X\\bbeta - \\y) \\] Differentiate the above w.r.t. \\(\\bbeta\\) , \\[\\begin{align*} f'(\\bbeta) &= (\\X\\bbeta - \\y)^T\\X \\equiv \\0 \\implies \\bbeta^T\\X^T\\X = \\y^T\\X \\implies \\bbeta = (\\X^T\\X)^{-1}\\X^T\\y \\end{align*}\\] This is the well-known normal equation . Note Note that, \\(\\bbeta = (\\X^T\\X)^{-1}\\X^T\\y\\) suggests that \\(\\bbeta\\) is a linear combination \\(\\y\\) . Actually, \\(\\bbeta\\) is BLUE (best linear unbiased estimator). You may ask why \\(\\X^T\\X\\) is invertible. It may not! If that is the case, in mathematical terms, the columns of X are linearly dependent; and in econometric terms, there are multi-collinearities .","title":"Regression"},{"location":"2.%20Quant%20Researcher/1.%20Regression/Regression/#regression","text":"","title":"Regression"},{"location":"2.%20Quant%20Researcher/1.%20Regression/Regression/#generalized-linear-regression","text":"Consider a generalized linear regression problem based on a sample of \\(n\\) observations \\((x_1, t_1) \\dots, (x_n, t_n)\\) . Suppose the design matrix \\(\\X\\) is of the form \\[ \\underbrace{ \\begin{bmatrix} Y_1\\\\ \\dots\\\\ Y_n \\end{bmatrix} }_{\\y} = \\underbrace{ \\begin{bmatrix} 1 & f_1(X_1) & \\dots & f_p(X_1) \\\\ &&\\dots\\\\ 1 & f_1(X_2) & \\dots & f_p(X_2) \\end{bmatrix} }_{\\X} \\underbrace{ \\begin{bmatrix} \\beta_0\\\\ \\dots\\\\ \\beta_p \\end{bmatrix} }_{\\bbeta} + \\underbrace{ \\begin{bmatrix} \\epsilon_1\\\\ \\dots\\\\ \\epsilon_n \\end{bmatrix} }_{\\bepsilon} \\] that is, \\[\\begin{align} \\y = \\X\\bbeta + \\bepsilon \\end{align}\\] where \\(\\X \\in \\RRR^{n \\times p}\\) is the design matrix, \\(\\bbeta \\in \\RRR^p\\) is the coefficient vector, \\(\\y \\in \\RRR^n\\) is the dependent random variable vector, and \\(\\bepsilon \\in \\RRR^n\\) is the normally distributed random error with mean \\(\\0\\) and covariance \\(\\sigma\\I_n\\) . Note Note that, \\(Y_i\\) represents unrealized random variables while \\(t_i\\) represents its realized observations . On the contrary, \\(X_i\\) is just a convenient way to put together the sample levels \\(x_i\\) . \\(f(\\cdot)\\) can be any reasonable function, and the model is still called a linear model, because \\(\\y\\) is a linear function of its coefficients \\(\\bbeta\\) , as \\(x_1, \\dots, x_n\\) are all constants. An example would be: \\[ \\underbrace{ \\begin{bmatrix} 1.132\\\\ \\dots\\\\ 0.128 \\end{bmatrix} }_{\\y} = \\underbrace{ \\begin{bmatrix} 1 & e^{3.134} & \\dots & 3.134^2 \\\\ &&\\dots\\\\ 1 & e^{129.334} & \\dots & 129.334^2 \\end{bmatrix} }_{\\X} \\underbrace{ \\begin{bmatrix} \\beta_0\\\\ \\dots\\\\ \\beta_p \\end{bmatrix} }_{\\bbeta} \\] It is called general linear regression model , because it is a general version of its simplest form \\(y = \\beta_0 + \\beta_1 x\\) , which is called the simple linear regression model , where the feature function is the identity function \\(f(x) \\equiv x\\) . Note the difference between general linear regression model and generalized linear regression model , where the latter refers to a family of linear models that include Poisson Regression, Logistic Regression, and etc., where the random error is no longer normally distributed.","title":"Generalized Linear Regression"},{"location":"2.%20Quant%20Researcher/1.%20Regression/Regression/#the-maximum-likelihood-estimator","text":"If we use Mean-Squared-Error (MSE) as the goodness-of-fit: \\[ f(\\bbeta) = \\frac12||\\X\\bbeta - \\y||_2^2 = \\frac12(\\X\\bbeta - \\y)^T(\\X\\bbeta - \\y) \\] Differentiate the above w.r.t. \\(\\bbeta\\) , \\[\\begin{align*} f'(\\bbeta) &= (\\X\\bbeta - \\y)^T\\X \\equiv \\0 \\implies \\bbeta^T\\X^T\\X = \\y^T\\X \\implies \\bbeta = (\\X^T\\X)^{-1}\\X^T\\y \\end{align*}\\] This is the well-known normal equation . Note Note that, \\(\\bbeta = (\\X^T\\X)^{-1}\\X^T\\y\\) suggests that \\(\\bbeta\\) is a linear combination \\(\\y\\) . Actually, \\(\\bbeta\\) is BLUE (best linear unbiased estimator). You may ask why \\(\\X^T\\X\\) is invertible. It may not! If that is the case, in mathematical terms, the columns of X are linearly dependent; and in econometric terms, there are multi-collinearities .","title":"The Maximum Likelihood Estimator"},{"location":"2.%20Quant%20Researcher/2.%20Classification/Random%20Forest/","text":"Random Forest","title":"Random Forest"},{"location":"2.%20Quant%20Researcher/2.%20Classification/Random%20Forest/#random-forest","text":"","title":"Random Forest"},{"location":"2.%20Quant%20Researcher/3.%20Dimension%20Reduction/Dimension%20Reduction/","text":"Classification","title":"Classification"},{"location":"2.%20Quant%20Researcher/3.%20Dimension%20Reduction/Dimension%20Reduction/#classification","text":"","title":"Classification"},{"location":"2.%20Quant%20Researcher/4.%20Clustering/Clustering/","text":"Classification","title":"Classification"},{"location":"2.%20Quant%20Researcher/4.%20Clustering/Clustering/#classification","text":"","title":"Classification"},{"location":"2.%20Quant%20Researcher/Calculus/Calculus/","text":"Calculus Vector Calculus Definition: Vector Field A vector field is a vector function \\(\\FF : \\RRR^n \\to \\RRR^n\\) . Vector fields can usefully be thought of as representing the velocity of a moving flow in space, and this physical intuition leads to notions such as the divergence (which represents the rate of change of volume of a flow) and curl (which represents the rotation of a flow). Line integral is the tool to use in the context of vector fields.","title":"Calculus"},{"location":"2.%20Quant%20Researcher/Calculus/Calculus/#calculus","text":"","title":"Calculus"},{"location":"2.%20Quant%20Researcher/Calculus/Calculus/#vector-calculus","text":"Definition: Vector Field A vector field is a vector function \\(\\FF : \\RRR^n \\to \\RRR^n\\) . Vector fields can usefully be thought of as representing the velocity of a moving flow in space, and this physical intuition leads to notions such as the divergence (which represents the rate of change of volume of a flow) and curl (which represents the rotation of a flow). Line integral is the tool to use in the context of vector fields.","title":"Vector Calculus"},{"location":"2.%20Quant%20Researcher/Causal%20Inference/Causal%20Inference/","text":"Causal inference in statistics: An overview [http://ftp.cs.ucla.edu/pub/stat_ser/r350.pdf link]","title":"Causal Inference"},{"location":"2.%20Quant%20Researcher/Differential%20Equations/PDEs/","text":"PDEs The Heat Equation The heat equation is the following PDE to model the temperature of a 1-D bar \\([0,x]\\) , \\[\\begin{align*} c(x)\\rho(x)\\frac{\\partial u}{\\partial t} = -\\frac{\\partial \\phi}{\\partial x} + Q(x,t) \\end{align*}\\] where \\(u(x,t)\\) : Temperature at any point \\(x\\) and any time \\(t\\) . \\(c(x) > 0\\) : Specific heat capacity at \\(x\\) , which is the amount of heat energy that takes to raise one unit of mass of the material by one unit of temperature. \\(\\rho(x)\\) : Mass density. \\(\\phi(x,t)\\) : Heat flux. If \\(\\phi > 0\\) then heat energy is flowing to the right; otherwise, it flows to the left. \\(Q(x,t)\\) : heat energy into or out from the system at \\(x\\) and \\(t\\) . By Fourier's law \\[\\begin{align*} \\phi(x,t) = -K_0(x)\\frac{\\partial u}{\\partial x} \\end{align*}\\] where \\(K_0(x)\\) is the thermal conductivity. Now the heat equation becomes: \\[\\begin{align*} c(x)\\rho(x)\\frac{\\partial u}{\\partial t} = -\\frac{\\partial}{\\partial x}\\left(K_0(x) \\frac{\\partial u}{\\partial x}\\right) + Q(x,t) \\end{align*}\\] Let's further assume the bar is uniform and define the thermal diffusivity as \\[\\begin{align*} k = \\frac{K_0}{c\\rho} \\end{align*}\\] The heat equation is then, \\[\\begin{align*} \\frac{\\partial u}{\\partial t} = k\\frac{\\partial^2 u}{\\partial x^2} + \\frac{Q(x,t)}{c\\rho} \\end{align*}\\]","title":"PDEs"},{"location":"2.%20Quant%20Researcher/Differential%20Equations/PDEs/#pdes","text":"","title":"PDEs"},{"location":"2.%20Quant%20Researcher/Differential%20Equations/PDEs/#the-heat-equation","text":"The heat equation is the following PDE to model the temperature of a 1-D bar \\([0,x]\\) , \\[\\begin{align*} c(x)\\rho(x)\\frac{\\partial u}{\\partial t} = -\\frac{\\partial \\phi}{\\partial x} + Q(x,t) \\end{align*}\\] where \\(u(x,t)\\) : Temperature at any point \\(x\\) and any time \\(t\\) . \\(c(x) > 0\\) : Specific heat capacity at \\(x\\) , which is the amount of heat energy that takes to raise one unit of mass of the material by one unit of temperature. \\(\\rho(x)\\) : Mass density. \\(\\phi(x,t)\\) : Heat flux. If \\(\\phi > 0\\) then heat energy is flowing to the right; otherwise, it flows to the left. \\(Q(x,t)\\) : heat energy into or out from the system at \\(x\\) and \\(t\\) . By Fourier's law \\[\\begin{align*} \\phi(x,t) = -K_0(x)\\frac{\\partial u}{\\partial x} \\end{align*}\\] where \\(K_0(x)\\) is the thermal conductivity. Now the heat equation becomes: \\[\\begin{align*} c(x)\\rho(x)\\frac{\\partial u}{\\partial t} = -\\frac{\\partial}{\\partial x}\\left(K_0(x) \\frac{\\partial u}{\\partial x}\\right) + Q(x,t) \\end{align*}\\] Let's further assume the bar is uniform and define the thermal diffusivity as \\[\\begin{align*} k = \\frac{K_0}{c\\rho} \\end{align*}\\] The heat equation is then, \\[\\begin{align*} \\frac{\\partial u}{\\partial t} = k\\frac{\\partial^2 u}{\\partial x^2} + \\frac{Q(x,t)}{c\\rho} \\end{align*}\\]","title":"The Heat Equation"},{"location":"2.%20Quant%20Researcher/Kaggle/Index/","text":"Index","title":"Index"},{"location":"2.%20Quant%20Researcher/Kaggle/Index/#index","text":"","title":"Index"},{"location":"2.%20Quant%20Researcher/Mathematical%20Statistics/FAQ/","text":"Q: How do you prove the existence of a stochastic process, e.g., Brownian motion, Gaussian processes? A: Kolmogorov extension theorem. Q: Unbiased v.s. consistent estimators A: Roughly speaking, \"unbiased\" is related to repeated experiments with the same number of samples while \"consistent\" is related to increased number of samples. Unbiased is \"vertical\", and consistent is \"horizontal\". There are examples that are biased but consistent, and unbiased but not consistent.","title":"FAQ"},{"location":"2.%20Quant%20Researcher/Mathematical%20Statistics/Fisher%20Information/","text":"Fisher Information Fisher information (or information for short) is a way of measuring the amount of information that an observable random variable \\(X\\) carries about an unknown parameter \\(\\theta\\) of a distribution that models \\(X\\) . Formally it is the variance of the score, or the expected value of the observed information. Definition: Score Score is the gradient of the log-likelihood function w.r.t. the parameter vector. \\[ s(\\theta) \\equiv \\frac{\\partial}{\\partial \\theta} \\log L(\\theta) \\] The mean of score is zero while the variance of score is the Fisher information. The ratio of two likelihood functions evaluated at two distinct parameter values can be understood as a definite integral of the score function. Bernstein-von Mises Theorem The Bernstein-von Mises Theorem states that a posterior distribution converges in the limit of infinite data to a multivariate normal distribution centered at the maximum likelihood estimator with covariance matrix given by \\(n^{-1}\\I(\\theta_0)^{-1}\\) , where \\(\\theta_0\\) is the true population parameter and \\(\\I(\\theta_0)\\) is the Fisher information matrix at the true population parameter value.","title":"Fisher Information"},{"location":"2.%20Quant%20Researcher/Mathematical%20Statistics/Fisher%20Information/#fisher-information","text":"Fisher information (or information for short) is a way of measuring the amount of information that an observable random variable \\(X\\) carries about an unknown parameter \\(\\theta\\) of a distribution that models \\(X\\) . Formally it is the variance of the score, or the expected value of the observed information. Definition: Score Score is the gradient of the log-likelihood function w.r.t. the parameter vector. \\[ s(\\theta) \\equiv \\frac{\\partial}{\\partial \\theta} \\log L(\\theta) \\] The mean of score is zero while the variance of score is the Fisher information. The ratio of two likelihood functions evaluated at two distinct parameter values can be understood as a definite integral of the score function.","title":"Fisher Information"},{"location":"2.%20Quant%20Researcher/Mathematical%20Statistics/Fisher%20Information/#bernstein-von-mises-theorem","text":"The Bernstein-von Mises Theorem states that a posterior distribution converges in the limit of infinite data to a multivariate normal distribution centered at the maximum likelihood estimator with covariance matrix given by \\(n^{-1}\\I(\\theta_0)^{-1}\\) , where \\(\\theta_0\\) is the true population parameter and \\(\\I(\\theta_0)\\) is the Fisher information matrix at the true population parameter value.","title":"Bernstein-von Mises Theorem"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Approximate/BP/","text":"Inference :: Approximate Expectation-Maximization (EM) [EM.html] Belief propagation (BP) [BP.html] Variational Bayes (VB) [VB.html] Expectation Propagation (EP) [EP.html]","title":"BP"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Approximate/EM/","text":"Inference :: Approximate Expectation-Maximization (EM) [EM.html] Belief propagation (BP) [BP.html] Variational Bayes (VB) [VB.html] Expectation Propagation (EP) [EP.html]","title":"EM"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Approximate/EP/","text":"Inference :: Approximate Expectation-Maximization (EM) [EM.html] Belief propagation (BP) [BP.html] Variational Bayes (VB) [VB.html] Expectation Propagation (EP) [EP.html]","title":"EP"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Approximate/VB/","text":"Inference :: Approximate Expectation-Maximization (EM) [EM.html] Belief propagation (BP) [BP.html] Variational Bayes (VB) [VB.html] Expectation Propagation (EP) [EP.html]","title":"VB"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Constrained%20Linear%20Optimization/","text":"Home A Stroll Through the Brambles of Optimization","title":"Home"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Constrained%20Linear%20Optimization/#home","text":"A Stroll Through the Brambles of Optimization","title":"Home"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Constrained%20Nonlinear%20Optimization/","text":"Home A Stroll Through the Brambles of Optimization","title":"Home"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Constrained%20Nonlinear%20Optimization/#home","text":"A Stroll Through the Brambles of Optimization","title":"Home"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Convex%20Optimization/Convex/","text":"ADMM == Chapter 1. Basic Concepts of Convex Analysis === 1.1. Convex Sets and Functions ==== 1.1.1 Convex Functions - Examples of benefit: Each /close convex set/ can be described in terms of the hyperplanes that support the set, /each point in the boundary of a convex set/ can be approached through the relative interior of the set, and /each halfline belonging to a closed convex set/ still belongs to the set when translated to start at any point in the set. Examples of inconvenience: However, contrary to affine and compact sets, some basic operations such as linear transformation and vector sum may not preserve the closedness of closed convex sets. This in turn complicates the treatment of some fundamental optimization issues, including the existence of optimal solutions and duality. 1 2 3 4 5 6 Definition 1.1.1: A subset $C$ of $\\mathbb{R}^n$ is called /convex/ if \\( \\begin{align} \\alpha x + (1 - \\alpha)y \\in C, ~~~ \\forall x, y \\in C, ~~ \\forall \\alpha \\in [0,1]. \\end{align} \\) Note that the empty set is by convention convex. 1 2 3 4 5 6 7 Definition: - We say that $x$ is a /closure point/ of a subset $X$ of $\\mathbb{R}^n$ if there exists a sequence $\\{x_k\\} \\subset X$ that converges to $x$. The /closure/ of $X$, denoted $cl(X)$, is the set of all closure points of $X$. - A vector $x \\in cl(X)$ which is not an interior point of $X$ is said to be a /boundary point/ of $X$. The set of all boundary points of $X$ is called the /boundary/ of $X$. - We say that $x$ is a /interior point/ of a subset $X$ of $\\mathbb{R}^n$ if there exists a neighborhood of $x$ that is contained in $X$. The /interior/ of $X$, denoted $int(X)$, is the set of all interior points of $X$. - A subset $X$ of $\\mathbb{R}^n$ is called /closed/ if it is equal to its closure. It is called /open/ if its complement, $\\{x | x \\in X\\}$, is closed. - It is called /bounded/ if there exists a scalar $c$ such that $\\|x\\| \\le c$ for all $x \\in X$. - It is called /compact/ if it is closed and bounded. 1 2 3 4 5 6 Proposition 1.1.1: - The intersection $\\cap_{i \\in I} C_i$ of any collection $\\{C_i | i \\in I\\}$ of convex sets is convex. - The vector sum $C_1 + C_2$ of two convex sets $C_1$ and $C_2$ is convex. - The set $\\lambda C$ is convex for any convex set $C$ and scalar $\\lambda$. Furthermore, if $C$ is a convex set and $\\lambda_1, \\lambda_2$ are positive scalars, $(\\lambda_1+\\lambda_2)C = \\lambda_1 C + \\lambda_2 C$. - The closure and the interior of a convex set are convex. - The image and the inverse image of a convex set under an affine function are convex. 1 2 3 4 5 6 Definition: suppose $a$ is a nonzero vector and $b$ is a scalar. - A /hyperplane/ is a set specified by a single linear equation, i.e., a set of the form $\\{x | a'x = b\\}$. - A /halfspace/ is a set specified by a single linear inequality, i.e., a set of the form $\\{x | a'x \\le b\\}$. - A set is said to be /polyhedral/ if it is nonempty and it is the intersection of a finite number of halfspaces, i.e., $\\{x | a'_j x \\le b_j, j= 1, \\cdots, r\\}$. - A set $C$ is said to be a /cone/ if for all $x \\in C$ and $\\lambda > 0$, we have $\\lambda x \\in C$. - A /polyhedral cone/ is a set of the form $C = \\{x | a'_j x \\le 0, j = 1, \\cdots, r\\}$, where $a_1, \\cdots, a_r$ are vectors in $\\mathbb{R}^n$.","title":"ADMM"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Convex%20Optimization/Convex/#admm","text":"== Chapter 1. Basic Concepts of Convex Analysis === 1.1. Convex Sets and Functions ==== 1.1.1 Convex Functions - Examples of benefit: Each /close convex set/ can be described in terms of the hyperplanes that support the set, /each point in the boundary of a convex set/ can be approached through the relative interior of the set, and /each halfline belonging to a closed convex set/ still belongs to the set when translated to start at any point in the set. Examples of inconvenience: However, contrary to affine and compact sets, some basic operations such as linear transformation and vector sum may not preserve the closedness of closed convex sets. This in turn complicates the treatment of some fundamental optimization issues, including the existence of optimal solutions and duality. 1 2 3 4 5 6 Definition 1.1.1: A subset $C$ of $\\mathbb{R}^n$ is called /convex/ if \\( \\begin{align} \\alpha x + (1 - \\alpha)y \\in C, ~~~ \\forall x, y \\in C, ~~ \\forall \\alpha \\in [0,1]. \\end{align} \\) Note that the empty set is by convention convex. 1 2 3 4 5 6 7 Definition: - We say that $x$ is a /closure point/ of a subset $X$ of $\\mathbb{R}^n$ if there exists a sequence $\\{x_k\\} \\subset X$ that converges to $x$. The /closure/ of $X$, denoted $cl(X)$, is the set of all closure points of $X$. - A vector $x \\in cl(X)$ which is not an interior point of $X$ is said to be a /boundary point/ of $X$. The set of all boundary points of $X$ is called the /boundary/ of $X$. - We say that $x$ is a /interior point/ of a subset $X$ of $\\mathbb{R}^n$ if there exists a neighborhood of $x$ that is contained in $X$. The /interior/ of $X$, denoted $int(X)$, is the set of all interior points of $X$. - A subset $X$ of $\\mathbb{R}^n$ is called /closed/ if it is equal to its closure. It is called /open/ if its complement, $\\{x | x \\in X\\}$, is closed. - It is called /bounded/ if there exists a scalar $c$ such that $\\|x\\| \\le c$ for all $x \\in X$. - It is called /compact/ if it is closed and bounded. 1 2 3 4 5 6 Proposition 1.1.1: - The intersection $\\cap_{i \\in I} C_i$ of any collection $\\{C_i | i \\in I\\}$ of convex sets is convex. - The vector sum $C_1 + C_2$ of two convex sets $C_1$ and $C_2$ is convex. - The set $\\lambda C$ is convex for any convex set $C$ and scalar $\\lambda$. Furthermore, if $C$ is a convex set and $\\lambda_1, \\lambda_2$ are positive scalars, $(\\lambda_1+\\lambda_2)C = \\lambda_1 C + \\lambda_2 C$. - The closure and the interior of a convex set are convex. - The image and the inverse image of a convex set under an affine function are convex. 1 2 3 4 5 6 Definition: suppose $a$ is a nonzero vector and $b$ is a scalar. - A /hyperplane/ is a set specified by a single linear equation, i.e., a set of the form $\\{x | a'x = b\\}$. - A /halfspace/ is a set specified by a single linear inequality, i.e., a set of the form $\\{x | a'x \\le b\\}$. - A set is said to be /polyhedral/ if it is nonempty and it is the intersection of a finite number of halfspaces, i.e., $\\{x | a'_j x \\le b_j, j= 1, \\cdots, r\\}$. - A set $C$ is said to be a /cone/ if for all $x \\in C$ and $\\lambda > 0$, we have $\\lambda x \\in C$. - A /polyhedral cone/ is a set of the form $C = \\{x | a'_j x \\le 0, j = 1, \\cdots, r\\}$, where $a_1, \\cdots, a_r$ are vectors in $\\mathbb{R}^n$.","title":"ADMM"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Monte%20Carlo%20Methods/","text":"Monte Carlo Methods Inverse Transform Sampling Suppose \\(z\\) is uniform random numbers, i.e., \\(p_Z(z) = 1\\) , and we want to sample \\(y\\) from \\(p_Y(y)\\) . Since \\( p_Y(y) = p_Z(z)\\left|\\frac{d z}{d y}\\right| = \\left|\\frac{d z}{d y}\\right| \\) so \\( z = h(y) \\equiv \\int_{-\\infty}^y p_Y(u) d u \\) and \\( y = h^{-1}(z) \\) This means: we can sample \\(z\\) first, and transform it to \\(y\\) through \\(y = h^{-1}(z)\\) . Rejection Sampling Importance Sampling","title":"Monte Carlo Methods"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Monte%20Carlo%20Methods/#monte-carlo-methods","text":"","title":"Monte Carlo Methods"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Monte%20Carlo%20Methods/#inverse-transform-sampling","text":"Suppose \\(z\\) is uniform random numbers, i.e., \\(p_Z(z) = 1\\) , and we want to sample \\(y\\) from \\(p_Y(y)\\) . Since \\( p_Y(y) = p_Z(z)\\left|\\frac{d z}{d y}\\right| = \\left|\\frac{d z}{d y}\\right| \\) so \\( z = h(y) \\equiv \\int_{-\\infty}^y p_Y(u) d u \\) and \\( y = h^{-1}(z) \\) This means: we can sample \\(z\\) first, and transform it to \\(y\\) through \\(y = h^{-1}(z)\\) .","title":"Inverse Transform Sampling"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Monte%20Carlo%20Methods/#rejection-sampling","text":"","title":"Rejection Sampling"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Monte%20Carlo%20Methods/#importance-sampling","text":"","title":"Importance Sampling"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Numerical%20Integration/","text":"A stroll through the brambles of Quant Finance","title":"Index"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Numerical%20ODE/","text":"A stroll through the brambles of Quant Finance","title":"Index"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Numerical%20PDE/","text":"A stroll through the brambles of Quant Finance","title":"Index"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Unconstrained%20Nonlinear%20Optimization/","text":"Home A Stroll Through the Brambles of Optimization","title":"Home"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Unconstrained%20Nonlinear%20Optimization/#home","text":"A Stroll Through the Brambles of Optimization","title":"Home"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Unconstrained%20Nonlinear%20Optimization/Uncontrained%20Linear%20Optimization/","text":"Home A Stroll Through the Brambles of Optimization","title":"Home"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Unconstrained%20Nonlinear%20Optimization/Uncontrained%20Linear%20Optimization/#home","text":"A Stroll Through the Brambles of Optimization","title":"Home"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Uncontrained%20Linear%20Optimization/","text":"Home A Stroll Through the Brambles of Optimization","title":"Home"},{"location":"2.%20Quant%20Researcher/Numerical%20Methods/Uncontrained%20Linear%20Optimization/#home","text":"A Stroll Through the Brambles of Optimization","title":"Home"},{"location":"3.%20Quant%20Trader/Asset%20Pricing/","text":"Asset Pricing","title":"Asset Pricing"},{"location":"3.%20Quant%20Trader/Asset%20Pricing/#asset-pricing","text":"","title":"Asset Pricing"},{"location":"3.%20Quant%20Trader/Black%20Scholes%20and%20Options/PnL/","text":"Option P&L Attributions Consider at time 0 that, the bank sells an option \\(P\\) and at the same time long \\(\\Delta\\) shares of the underlying stock \\(S\\) to setup a delta-hedged position: \\[\\begin{align} \\Pi = -P + \\Delta S \\end{align}\\] Important In a complete market where arbitrage is impossible, the following accounting equation should hold in its expectation at any time \\(t\\) : \\[\\begin{align} \\underbrace{\\Delta_t S_t}_{\\mbox{Asset}} = \\underbrace{0}_{\\mbox{Equity}} + \\underbrace{\\underbrace{P_t}_{\\mbox{liability to counter-party}} + \\underbrace{(-P_t + \\Delta_t S_t)}_{\\mbox{liability to money market}}}_{\\mbox{Liability}} \\end{align}\\] At time \\(0\\) all terms are zero. During the time period \\([t, t + dt]\\) the P&L of this portfolio, i.e., the bank's equity , becomes: \\[\\begin{align*} \\small{ \\underbrace{\\left(\\underbrace{qdt\\Delta S}_{\\mbox{proceeds from stock}} + \\underbrace{\\Delta dS}_{\\mbox{P&L of stock}}\\right)}_{\\mbox{Asset P&L}} - \\underbrace{\\left(\\underbrace{dP}_{\\mbox{P&L of option}} + \\underbrace{rdt(-P+\\Delta S)}_{\\mbox{interest paid}} \\right)}_{\\mbox{Liability P&L}} } \\end{align*}\\] where we have assumed that the risk-free rate in the money market is \\(r\\) . By assuming the option price only depends on time \\(t\\) and the stock price \\(S_t\\) and by Ito's lemma, we have \\[\\begin{align} dP = \\frac{\\partial P}{\\partial t}dt + \\frac{\\partial P}{\\partial S}dS + \\frac12 \\frac{\\partial^2 P}{\\partial S^2} (dS)^2 \\label{eq:dP} \\end{align}\\] Note Note that we have not specified the dynamics of \\(dS\\) . Plug in Equation \\(\\ref{eq:dP}\\) and delta hedge the position by setting dynamically \\[ \\Delta \\equiv \\frac{\\partial P}{\\partial S} \\] we obtain \\[ P\\&L = -\\left[\\frac{\\partial P}{\\partial t} -rP + (r - q) S\\frac{\\partial P}{\\partial S}\\right]dt - \\frac12 S^2\\frac{\\partial^2 P}{\\partial S^2} \\left(\\frac{dS}{S}\\right)^2 \\] Note The term \\(\\frac{dS}{S}\\) is called dollar gamma , because it has the same unit as the underlying stock. We know that at time \\(t\\) , all quantities of the above are observable, except for the term \\(\\left(\\frac{dS}{S}\\right)\\) ; and we know that in a complete market, the expectation of the P&L has to be zero. Thus, if we denote \\[ \\hat{\\sigma}^2 dt \\equiv \\EEE\\left[\\left(\\frac{dS}{S}\\right)^2\\right] \\] where the latent variable \\(\\hat{\\sigma}\\) measures the volatility of \\(S\\) during time interval \\([t, t + dt]\\) , we obtain, \\[ \\EEE[P\\&L] = -\\left[\\frac{\\partial S}{\\partial t} -rP + (r-q)S\\frac{\\partial P}{\\partial S} \\right]dt - \\frac12 S^2\\frac{\\partial^2 P}{\\partial S^2} \\hat{\\sigma}^2 dt \\equiv 0 \\] which implies \\[ \\frac{\\partial S}{\\partial t} -rP + (r-q)S\\frac{\\partial P}{\\partial S} = - \\frac12 S^2\\frac{\\partial^2 C}{\\partial S^2} \\hat{\\sigma}^2 \\] and finally, Important \\[\\begin{align} P\\&L = \\frac12 S^2\\frac{\\partial^2 P}{\\partial S^2} \\left[\\hat{\\sigma}^2 dt - \\left(\\frac{dS}{S}\\right)^2\\right] \\end{align}\\] The P&L of the delta-hedged position comes from the difference between the implied variance and the realized variance, weighted by the dollar gamma.","title":"Option P&L Attributions"},{"location":"3.%20Quant%20Trader/Black%20Scholes%20and%20Options/PnL/#option-pl-attributions","text":"Consider at time 0 that, the bank sells an option \\(P\\) and at the same time long \\(\\Delta\\) shares of the underlying stock \\(S\\) to setup a delta-hedged position: \\[\\begin{align} \\Pi = -P + \\Delta S \\end{align}\\] Important In a complete market where arbitrage is impossible, the following accounting equation should hold in its expectation at any time \\(t\\) : \\[\\begin{align} \\underbrace{\\Delta_t S_t}_{\\mbox{Asset}} = \\underbrace{0}_{\\mbox{Equity}} + \\underbrace{\\underbrace{P_t}_{\\mbox{liability to counter-party}} + \\underbrace{(-P_t + \\Delta_t S_t)}_{\\mbox{liability to money market}}}_{\\mbox{Liability}} \\end{align}\\] At time \\(0\\) all terms are zero. During the time period \\([t, t + dt]\\) the P&L of this portfolio, i.e., the bank's equity , becomes: \\[\\begin{align*} \\small{ \\underbrace{\\left(\\underbrace{qdt\\Delta S}_{\\mbox{proceeds from stock}} + \\underbrace{\\Delta dS}_{\\mbox{P&L of stock}}\\right)}_{\\mbox{Asset P&L}} - \\underbrace{\\left(\\underbrace{dP}_{\\mbox{P&L of option}} + \\underbrace{rdt(-P+\\Delta S)}_{\\mbox{interest paid}} \\right)}_{\\mbox{Liability P&L}} } \\end{align*}\\] where we have assumed that the risk-free rate in the money market is \\(r\\) . By assuming the option price only depends on time \\(t\\) and the stock price \\(S_t\\) and by Ito's lemma, we have \\[\\begin{align} dP = \\frac{\\partial P}{\\partial t}dt + \\frac{\\partial P}{\\partial S}dS + \\frac12 \\frac{\\partial^2 P}{\\partial S^2} (dS)^2 \\label{eq:dP} \\end{align}\\] Note Note that we have not specified the dynamics of \\(dS\\) . Plug in Equation \\(\\ref{eq:dP}\\) and delta hedge the position by setting dynamically \\[ \\Delta \\equiv \\frac{\\partial P}{\\partial S} \\] we obtain \\[ P\\&L = -\\left[\\frac{\\partial P}{\\partial t} -rP + (r - q) S\\frac{\\partial P}{\\partial S}\\right]dt - \\frac12 S^2\\frac{\\partial^2 P}{\\partial S^2} \\left(\\frac{dS}{S}\\right)^2 \\] Note The term \\(\\frac{dS}{S}\\) is called dollar gamma , because it has the same unit as the underlying stock. We know that at time \\(t\\) , all quantities of the above are observable, except for the term \\(\\left(\\frac{dS}{S}\\right)\\) ; and we know that in a complete market, the expectation of the P&L has to be zero. Thus, if we denote \\[ \\hat{\\sigma}^2 dt \\equiv \\EEE\\left[\\left(\\frac{dS}{S}\\right)^2\\right] \\] where the latent variable \\(\\hat{\\sigma}\\) measures the volatility of \\(S\\) during time interval \\([t, t + dt]\\) , we obtain, \\[ \\EEE[P\\&L] = -\\left[\\frac{\\partial S}{\\partial t} -rP + (r-q)S\\frac{\\partial P}{\\partial S} \\right]dt - \\frac12 S^2\\frac{\\partial^2 P}{\\partial S^2} \\hat{\\sigma}^2 dt \\equiv 0 \\] which implies \\[ \\frac{\\partial S}{\\partial t} -rP + (r-q)S\\frac{\\partial P}{\\partial S} = - \\frac12 S^2\\frac{\\partial^2 C}{\\partial S^2} \\hat{\\sigma}^2 \\] and finally, Important \\[\\begin{align} P\\&L = \\frac12 S^2\\frac{\\partial^2 P}{\\partial S^2} \\left[\\hat{\\sigma}^2 dt - \\left(\\frac{dS}{S}\\right)^2\\right] \\end{align}\\] The P&L of the delta-hedged position comes from the difference between the implied variance and the realized variance, weighted by the dollar gamma.","title":"Option P&amp;L Attributions"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Four%20Basics/","text":"Four Basics Long Call Short (Naked) Call Long Put Short (Naked) Put","title":"Four Basics"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Four%20Basics/#four-basics","text":"","title":"Four Basics"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Four%20Basics/#long-call","text":"","title":"Long Call"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Four%20Basics/#short-naked-call","text":"","title":"Short (Naked) Call"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Four%20Basics/#long-put","text":"","title":"Long Put"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Four%20Basics/#short-naked-put","text":"","title":"Short (Naked) Put"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Income%20Strategies/","text":"Income Strategies Covered Call Short (Naked) Put Bull Put Spread Bear Call Spread","title":"Income Strategies"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Income%20Strategies/#income-strategies","text":"","title":"Income Strategies"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Income%20Strategies/#covered-call","text":"","title":"Covered Call"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Income%20Strategies/#short-naked-put","text":"","title":"Short (Naked) Put"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Income%20Strategies/#bull-put-spread","text":"","title":"Bull Put Spread"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Income%20Strategies/#bear-call-spread","text":"","title":"Bear Call Spread"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Leveraged%20Strategies/","text":"Leveraged Strategies","title":"Leveraged Strategies"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Leveraged%20Strategies/#leveraged-strategies","text":"","title":"Leveraged Strategies"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Sideways%20Strategies/","text":"Sideways Strategies","title":"Sideways Strategies"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Sideways%20Strategies/#sideways-strategies","text":"","title":"Sideways Strategies"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Synthetic%20Strategies/","text":"Synthetic Strategies Long Box","title":"Synthetic Strategies"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Synthetic%20Strategies/#synthetic-strategies","text":"","title":"Synthetic Strategies"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Synthetic%20Strategies/#long-box","text":"","title":"Long Box"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Vertical%20Spreads/","text":"Vertical Spreads","title":"Vertical Spreads"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Vertical%20Spreads/#vertical-spreads","text":"","title":"Vertical Spreads"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Volatility%20Strategies/","text":"Volatility Strategies","title":"Volatility Strategies"},{"location":"3.%20Quant%20Trader/Option%20Strategies/Volatility%20Strategies/#volatility-strategies","text":"","title":"Volatility Strategies"},{"location":"3.%20Quant%20Trader/Portfolio%20Optimization/Portfolio%20Optimization/","text":"Portfolio Optimization Suppose there are \\(n\\) assets whose rate of return vector \\(\\r\\) has mean \\(\\mu\\) and covariance \\(\\bSigma\\) . Note The mean vector and the covariance matrix are of the return vector \\(\\r\\) , not of the asset price \\(\\S\\) . The portfolio optimization problem, seeking optimal weight \\(\\w\\) , can be formulated as follows: Problem A: find the global minimum variance portfolio Problem A: find the global minimum variance portfolio \\[\\begin{align*} &\\min_\\w \\w^T\\bSigma\\w \\\\ s.t.~ & \\w^T\\w = 1 \\end{align*}\\] where \\(\\mu_0\\) is the required rate of return. Problem B: minimize portfolio variance given required return Problem A: minimize portfolio variance given required return \\[\\begin{align*} &\\min_\\w \\w^T\\bSigma\\w \\\\ s.t.~ &\\w^T\\bmu = \\mu_0 \\mbox{ and } \\w^T\\w = 1 \\end{align*}\\] where \\(\\mu_0\\) is the required rate of return. Solving the Lagrangian function \\[\\begin{align*} f(\\alpha, \\beta, \\w) = \\frac12 \\w^T\\bSigma\\w + \\alpha (\\w^T\\bmu - \\mu_0) + \\beta (\\w^T\\w - 1) \\end{align*}\\] gives us \\[\\begin{align*} &\\bSigma\\w + \\bmu\\lambda + \\beta \\w &= \\0\\\\ &\\bmu^T\\w &= \\mu_0\\\\ &\\w^T\\w &= 1 \\end{align*}\\] or \\[\\begin{align*} \\begin{bmatrix} \\bSigma & \\bmu \\\\ \\bmu^T & 0 \\end{bmatrix} \\begin{bmatrix} \\w\\\\ \\lambda \\end{bmatrix} = \\begin{bmatrix} \\0\\\\ \\mu_0 \\end{bmatrix} \\end{align*}\\] Problem C: maximize portfolio return given required risk Problem B: maximize portfolio return given required risk \\[\\begin{align*} &\\max_\\w \\w^T\\bmu \\\\ s.t.~ &\\w^T\\bSigma\\w = \\sigma_0^2 \\mbox{ and } \\w^T\\w = 1 \\end{align*}\\] where \\(\\mu_0\\) is the required rate of return.","title":"Portfolio Optimization"},{"location":"3.%20Quant%20Trader/Portfolio%20Optimization/Portfolio%20Optimization/#portfolio-optimization","text":"Suppose there are \\(n\\) assets whose rate of return vector \\(\\r\\) has mean \\(\\mu\\) and covariance \\(\\bSigma\\) . Note The mean vector and the covariance matrix are of the return vector \\(\\r\\) , not of the asset price \\(\\S\\) . The portfolio optimization problem, seeking optimal weight \\(\\w\\) , can be formulated as follows:","title":"Portfolio Optimization"},{"location":"3.%20Quant%20Trader/Portfolio%20Optimization/Portfolio%20Optimization/#problem-a-find-the-global-minimum-variance-portfolio","text":"Problem A: find the global minimum variance portfolio \\[\\begin{align*} &\\min_\\w \\w^T\\bSigma\\w \\\\ s.t.~ & \\w^T\\w = 1 \\end{align*}\\] where \\(\\mu_0\\) is the required rate of return.","title":"Problem A: find the global minimum variance portfolio"},{"location":"3.%20Quant%20Trader/Portfolio%20Optimization/Portfolio%20Optimization/#problem-b-minimize-portfolio-variance-given-required-return","text":"Problem A: minimize portfolio variance given required return \\[\\begin{align*} &\\min_\\w \\w^T\\bSigma\\w \\\\ s.t.~ &\\w^T\\bmu = \\mu_0 \\mbox{ and } \\w^T\\w = 1 \\end{align*}\\] where \\(\\mu_0\\) is the required rate of return. Solving the Lagrangian function \\[\\begin{align*} f(\\alpha, \\beta, \\w) = \\frac12 \\w^T\\bSigma\\w + \\alpha (\\w^T\\bmu - \\mu_0) + \\beta (\\w^T\\w - 1) \\end{align*}\\] gives us \\[\\begin{align*} &\\bSigma\\w + \\bmu\\lambda + \\beta \\w &= \\0\\\\ &\\bmu^T\\w &= \\mu_0\\\\ &\\w^T\\w &= 1 \\end{align*}\\] or \\[\\begin{align*} \\begin{bmatrix} \\bSigma & \\bmu \\\\ \\bmu^T & 0 \\end{bmatrix} \\begin{bmatrix} \\w\\\\ \\lambda \\end{bmatrix} = \\begin{bmatrix} \\0\\\\ \\mu_0 \\end{bmatrix} \\end{align*}\\]","title":"Problem B: minimize portfolio variance given required return"},{"location":"3.%20Quant%20Trader/Portfolio%20Optimization/Portfolio%20Optimization/#problem-c-maximize-portfolio-return-given-required-risk","text":"Problem B: maximize portfolio return given required risk \\[\\begin{align*} &\\max_\\w \\w^T\\bmu \\\\ s.t.~ &\\w^T\\bSigma\\w = \\sigma_0^2 \\mbox{ and } \\w^T\\w = 1 \\end{align*}\\] where \\(\\mu_0\\) is the required rate of return.","title":"Problem C: maximize portfolio return given required risk"},{"location":"3.%20Quant%20Trader/Stochastic%20Calculus/BM/","text":"Brownian Motion","title":"Brownian Motion"},{"location":"3.%20Quant%20Trader/Stochastic%20Calculus/BM/#brownian-motion","text":"","title":"Brownian Motion"},{"location":"3.%20Quant%20Trader/Stochastic%20Calculus/Change%20of%20Measure/","text":"Change of Measure If the discounted underlying asset of an option is a martingale, then the value of the option can be computed as the expected value of the discounted option payoff.","title":"Change of Measure"},{"location":"3.%20Quant%20Trader/Stochastic%20Calculus/Change%20of%20Measure/#change-of-measure","text":"If the discounted underlying asset of an option is a martingale, then the value of the option can be computed as the expected value of the discounted option payoff.","title":"Change of Measure"},{"location":"3.%20Quant%20Trader/Trading%20Strategies/Algorithmic%20Trading/","text":"Algorithmic Trading The IEX Signal The Evolution of the Crumbling Quote Signal In 1971, the Financial Industry Regulatory Authority (FINRA), created a revolutionary exchange called the National Association of Securities Dealers Automated Quotations (NASDAQ), which was the world's first electronic stock market. Today, algorithmic trading represents over two thirds of all market transactions. There are two main strategies in algorithmic trading: statistical arbitrage and latency arbitrage . Statistical arbitrage derives its advantage from the strength of its models while latency arbitrage derives its advantage from its speed . Statistical arbitrage is generally justified to be able to correct market mispricings and make the market more efficient. On the contrary, latency arbitrage is ethically questionable and debateable as it essentially is to forerun other market participants. For example, there are three well-known malicious strategies: Predatory Trading Predatory trading is the HFT equivalent of the illegal practice of front-running. For example, if a broker receives an order from a client to buy 100,000 shares of security S at $20.00, he may 1) buy security S at $20.00 and keep it in his personal account, 2) execute his client's order, and 3) sell the shares in his personal account after the price has been driven up. This is unethical because, first, the trader is trading using non-public information; and secondly, he is negatively impacting his client's order via slippage. For example, there are four nearby exchanges in New York: BATS, Diret Edge, NASDAQ, and the NYSE. The difference between arriving at the first exchange, BATS, and the last exchange, NYSE, is about 2 milliseconds. However, HFT firms can travel among all these exchanges in as little as 476 microseconds. Thus, the HFT firm can buy all the shares in the market and sell it at a higher price to the buyer. Stop-Loss Tripping Suppose the HFT firm pays its broker to have access to their order books. In particular, if we know that there are stop loss orders at $40.00, $37.50, and $36.00. We can short the stock to trigger $40, can pressure the stock to a flash-crash, then we cover our short positions possibly at $36.00 and take the profit. Order Spoofing This strategy involves submitting disingenuous orders to trick other traders. The HFT firm places a large amount of overpriced buying orders, and at the same time has had bullish option positions. When other slower participants have created illustrations for themselves that the stock prices are going up and followed by placing large amounts of reasonablely higher buying orders, the HFT firm would withdraw their buying orders and gain profit through the bullish option positions. In September 2016, a new exchange called Investors Exchange (IEX) received approval from the SEC and will be the first transparent exchange where malicious latency arbitrage strategies are no longer possible.","title":"Algorithmic Trading"},{"location":"3.%20Quant%20Trader/Trading%20Strategies/Algorithmic%20Trading/#algorithmic-trading","text":"The IEX Signal The Evolution of the Crumbling Quote Signal In 1971, the Financial Industry Regulatory Authority (FINRA), created a revolutionary exchange called the National Association of Securities Dealers Automated Quotations (NASDAQ), which was the world's first electronic stock market. Today, algorithmic trading represents over two thirds of all market transactions. There are two main strategies in algorithmic trading: statistical arbitrage and latency arbitrage . Statistical arbitrage derives its advantage from the strength of its models while latency arbitrage derives its advantage from its speed . Statistical arbitrage is generally justified to be able to correct market mispricings and make the market more efficient. On the contrary, latency arbitrage is ethically questionable and debateable as it essentially is to forerun other market participants. For example, there are three well-known malicious strategies:","title":"Algorithmic Trading"},{"location":"3.%20Quant%20Trader/Trading%20Strategies/Algorithmic%20Trading/#predatory-trading","text":"Predatory trading is the HFT equivalent of the illegal practice of front-running. For example, if a broker receives an order from a client to buy 100,000 shares of security S at $20.00, he may 1) buy security S at $20.00 and keep it in his personal account, 2) execute his client's order, and 3) sell the shares in his personal account after the price has been driven up. This is unethical because, first, the trader is trading using non-public information; and secondly, he is negatively impacting his client's order via slippage. For example, there are four nearby exchanges in New York: BATS, Diret Edge, NASDAQ, and the NYSE. The difference between arriving at the first exchange, BATS, and the last exchange, NYSE, is about 2 milliseconds. However, HFT firms can travel among all these exchanges in as little as 476 microseconds. Thus, the HFT firm can buy all the shares in the market and sell it at a higher price to the buyer.","title":"Predatory Trading"},{"location":"3.%20Quant%20Trader/Trading%20Strategies/Algorithmic%20Trading/#stop-loss-tripping","text":"Suppose the HFT firm pays its broker to have access to their order books. In particular, if we know that there are stop loss orders at $40.00, $37.50, and $36.00. We can short the stock to trigger $40, can pressure the stock to a flash-crash, then we cover our short positions possibly at $36.00 and take the profit.","title":"Stop-Loss Tripping"},{"location":"3.%20Quant%20Trader/Trading%20Strategies/Algorithmic%20Trading/#order-spoofing","text":"This strategy involves submitting disingenuous orders to trick other traders. The HFT firm places a large amount of overpriced buying orders, and at the same time has had bullish option positions. When other slower participants have created illustrations for themselves that the stock prices are going up and followed by placing large amounts of reasonablely higher buying orders, the HFT firm would withdraw their buying orders and gain profit through the bullish option positions. In September 2016, a new exchange called Investors Exchange (IEX) received approval from the SEC and will be the first transparent exchange where malicious latency arbitrage strategies are no longer possible.","title":"Order Spoofing"},{"location":"3.%20Quant%20Trader/Volatility/","text":"Volatility","title":"Volatility"},{"location":"3.%20Quant%20Trader/Volatility/#volatility","text":"","title":"Volatility"},{"location":"_About/","text":"Markdown Examples \\[ \\underbrace{\\bA}_{=0} = 0 \\] OI Wiki Python 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] C++ 1 2 3 void f () { } The range () function is highlighted. Ex. 2.1 Suppose each of \\(K\\) -classes has associated target \\(t_k\\) , which is a vector of all zeros, except a one in the \\(k\\) -th position. Show that classifying to the largest of \\(\\hat y\\) amounts to choosing the closet target, \\(\\min_k\\|t_k-\\hat y\\|\\) , if the elements of \\(\\hat y\\) sum to one. Soln. 2.1 We need to prove: \\[\\begin{equation} \\underset{k}{\\operatorname{argmax}} \\hat y_k = \\underset{k}{\\operatorname{argmin}} \\|t_k-\\hat y\\|^2 \\label{eq:2-1a} \\end{equation}\\] By definition of \\(t_k\\) , we have \\[\\begin{align} \\|t_k-\\hat y\\|^2 &= (1-\\hat y_k)^2 + \\sum_{l \\neq k }(0 - \\hat y_l)^2\\nonumber\\\\ &= (1-\\hat y_k)^2 + \\sum_{l \\neq k }\\hat y_l^2 \\label{eq:2-1b} \\end{align}\\] Given \\(\\eqref{eq:2-1b}\\) , it's straightforward to see that \\(\\eqref{eq:2-1a}\\) indeed holds. Python 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] C++ 1 2 3 void f () { } The range () function is highlighted. Info The assumption \\(\\sum_{k=1}^K\\hat y_k=1\\) is actually not required. [ CAPM ]: Capital Asset Pricing Model asdfasdfasdfa asdfasd asdfasd adddasdfasdfasdfa asdfasd asdfasd adddasdfasdfasdfa asdfasd asdfasd addd asdfasdfasdfa asdfasd asdfasd addd asdfasdfasdfa asdfasd asdfasd addd Info The assumption \\(\\sum_{k=1}^K\\hat y_k=1\\) is actually not required. [ CAPM ]: Capital Asset Pricing Model Unordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Example Unordered List Example : 1 2 3 * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Ordered List Example : 1 2 3 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Method Description GET :material-check: Fetch resource PUT :material-check-all: Update resource DELETE :material-close: Delete resource Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Markdown Examples"},{"location":"_About/#markdown-examples","text":"\\[ \\underbrace{\\bA}_{=0} = 0 \\] OI Wiki Python 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] C++ 1 2 3 void f () { } The range () function is highlighted. Ex. 2.1 Suppose each of \\(K\\) -classes has associated target \\(t_k\\) , which is a vector of all zeros, except a one in the \\(k\\) -th position. Show that classifying to the largest of \\(\\hat y\\) amounts to choosing the closet target, \\(\\min_k\\|t_k-\\hat y\\|\\) , if the elements of \\(\\hat y\\) sum to one. Soln. 2.1 We need to prove: \\[\\begin{equation} \\underset{k}{\\operatorname{argmax}} \\hat y_k = \\underset{k}{\\operatorname{argmin}} \\|t_k-\\hat y\\|^2 \\label{eq:2-1a} \\end{equation}\\] By definition of \\(t_k\\) , we have \\[\\begin{align} \\|t_k-\\hat y\\|^2 &= (1-\\hat y_k)^2 + \\sum_{l \\neq k }(0 - \\hat y_l)^2\\nonumber\\\\ &= (1-\\hat y_k)^2 + \\sum_{l \\neq k }\\hat y_l^2 \\label{eq:2-1b} \\end{align}\\] Given \\(\\eqref{eq:2-1b}\\) , it's straightforward to see that \\(\\eqref{eq:2-1a}\\) indeed holds. Python 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] C++ 1 2 3 void f () { } The range () function is highlighted. Info The assumption \\(\\sum_{k=1}^K\\hat y_k=1\\) is actually not required. [ CAPM ]: Capital Asset Pricing Model asdfasdfasdfa asdfasd asdfasd adddasdfasdfasdfa asdfasd asdfasd adddasdfasdfasdfa asdfasd asdfasd addd asdfasdfasdfa asdfasd asdfasd addd asdfasdfasdfa asdfasd asdfasd addd Info The assumption \\(\\sum_{k=1}^K\\hat y_k=1\\) is actually not required. [ CAPM ]: Capital Asset Pricing Model Unordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Example Unordered List Example : 1 2 3 * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Ordered List Example : 1 2 3 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Method Description GET :material-check: Fetch resource PUT :material-check-all: Update resource DELETE :material-close: Delete resource Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Markdown Examples"}]}